{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///D:/3rd%20Year/Projects/Project-Xpo/qsa%20-%20Copy/quant-sec-web/src/lib/crypto.ts"],"sourcesContent":["// Crypto utilities for the Quantum Secure Email Client\r\n// Uses Web Crypto API for AES-256, HMAC-SHA256, and scrypt for key derivation\r\n// Uses real Crystal-Kyber via backend API\r\n\r\nimport { UserStorage } from './api';\r\n\r\nexport interface KyberKeyPair {\r\n  publicKey: string; // base64 encoded\r\n  privateKey: string; // base64 encoded\r\n}\r\n\r\nexport interface EncryptedData {\r\n  tag: string; // HMAC-SHA256 hash\r\n  concatenated_string: string; // JSON string with salt, cipher_text, encrypted_passkey, iv (snake_case to match backend)\r\n}\r\n\r\nexport interface AESEncryptedData {\r\n  cipher_text: string; // base64 encoded\r\n  salt: string; // base64 encoded\r\n  iv: string; // base64 encoded IV\r\n}\r\n\r\n// Web Crypto API utilities\r\nexport class CryptoUtils {\r\n  // Generate random bytes\r\n  static async randomBytes(length: number): Promise<Uint8Array> {\r\n    return crypto.getRandomValues(new Uint8Array(length));\r\n  }\r\n\r\n  // Convert ArrayBuffer or Uint8Array to base64\r\n  static arrayBufferToBase64(buffer: ArrayBuffer | Uint8Array): string {\r\n    const bytes = buffer instanceof Uint8Array ? buffer : new Uint8Array(buffer);\r\n    let binary = '';\r\n    for (let i = 0; i < bytes.byteLength; i++) {\r\n      binary += String.fromCharCode(bytes[i]);\r\n    }\r\n    return btoa(binary);\r\n  }\r\n\r\n  // Convert base64 to ArrayBuffer\r\n  static base64ToArrayBuffer(base64: string): ArrayBuffer {\r\n    const binaryString = atob(base64);\r\n    const bytes = new Uint8Array(binaryString.length);\r\n    for (let i = 0; i < binaryString.length; i++) {\r\n      bytes[i] = binaryString.charCodeAt(i);\r\n    }\r\n    return bytes.buffer;\r\n  }\r\n\r\n  // Convert string to ArrayBuffer\r\n  static stringToArrayBuffer(str: string): ArrayBuffer {\r\n    const encoder = new TextEncoder();\r\n    const uint8Array = encoder.encode(str);\r\n    // Create a proper ArrayBuffer copy\r\n    const buffer = new ArrayBuffer(uint8Array.byteLength);\r\n    new Uint8Array(buffer).set(uint8Array);\r\n    return buffer;\r\n  }\r\n\r\n  // Convert ArrayBuffer to string\r\n  static arrayBufferToString(buffer: ArrayBuffer): string {\r\n    const decoder = new TextDecoder();\r\n    return decoder.decode(buffer);\r\n  }\r\n\r\n  // Derive key using scrypt (using scrypt-js library)\r\n  static async deriveKey(password: string, salt: Uint8Array, keyLength: number = 32): Promise<Uint8Array> {\r\n    // Import scrypt-js dynamically\r\n    const { scrypt } = await import('scrypt-js');\r\n    \r\n    const passwordBuffer = this.stringToArrayBuffer(password);\r\n    const derivedKey = await scrypt(\r\n      new Uint8Array(passwordBuffer),\r\n      salt,\r\n      16384, // N = 2^14\r\n      8,     // r = 8\r\n      1,     // p = 1\r\n      keyLength\r\n    );\r\n    \r\n    return derivedKey;\r\n  }\r\n\r\n  // AES-256 encryption using Web Crypto API with secure IV\r\n  static async aesEncrypt(plaintext: string, passkey: string): Promise<AESEncryptedData> {\r\n    const salt = await this.randomBytes(16);\r\n    const iv = await this.randomBytes(16); // ✅ Secure random IV\r\n    const key = await this.deriveKey(passkey, salt);\r\n    \r\n    // Import the key\r\n    const cryptoKey = await crypto.subtle.importKey(\r\n      'raw',\r\n      key,\r\n      { name: 'AES-CBC' },\r\n      false,\r\n      ['encrypt']\r\n    );\r\n\r\n    // Pad the plaintext to 16-byte blocks\r\n    const paddedText = this.pad(plaintext);\r\n    const plaintextBuffer = this.stringToArrayBuffer(paddedText);\r\n    \r\n    // Encrypt\r\n    const encryptedBuffer = await crypto.subtle.encrypt(\r\n      { name: 'AES-CBC', iv },\r\n      cryptoKey,\r\n      plaintextBuffer\r\n    );\r\n\r\n    return {\r\n      cipher_text: this.arrayBufferToBase64(encryptedBuffer),\r\n      salt: this.arrayBufferToBase64(salt),\r\n      iv: this.arrayBufferToBase64(iv) // ✅ Include IV in output\r\n    };\r\n  }\r\n\r\n  // AES-256 decryption using Web Crypto API with IV\r\n  static async aesDecrypt(encryptedData: AESEncryptedData, passkey: string): Promise<string> {\r\n    const salt = new Uint8Array(this.base64ToArrayBuffer(encryptedData.salt));\r\n    const iv = new Uint8Array(this.base64ToArrayBuffer(encryptedData.iv)); // ✅ Use provided IV\r\n    const key = await this.deriveKey(passkey, salt);\r\n    \r\n    // Import the key\r\n    const cryptoKey = await crypto.subtle.importKey(\r\n      'raw',\r\n      key,\r\n      { name: 'AES-CBC' },\r\n      false,\r\n      ['decrypt']\r\n    );\r\n\r\n    const encryptedBuffer = this.base64ToArrayBuffer(encryptedData.cipher_text);\r\n    \r\n    // Decrypt\r\n    const decryptedBuffer = await crypto.subtle.decrypt(\r\n      { name: 'AES-CBC', iv },\r\n      cryptoKey,\r\n      encryptedBuffer\r\n    );\r\n\r\n    const decryptedText = this.arrayBufferToString(decryptedBuffer);\r\n    return this.unpad(decryptedText);\r\n  }\r\n\r\n  // HMAC-SHA256 - ✅ Proper HMAC implementation\r\n  static async hmacSha256(data: string, key: string): Promise<string> {\r\n    const keyBuffer = this.stringToArrayBuffer(key);\r\n    const dataBuffer = this.stringToArrayBuffer(data);\r\n    \r\n    const cryptoKey = await crypto.subtle.importKey(\r\n      'raw',\r\n      keyBuffer,\r\n      { name: 'HMAC', hash: 'SHA-256' },\r\n      false,\r\n      ['sign']\r\n    );\r\n    \r\n    const signature = await crypto.subtle.sign(\r\n      'HMAC',\r\n      cryptoKey,\r\n      dataBuffer\r\n    );\r\n    \r\n    return this.arrayBufferToBase64(signature);\r\n  }\r\n\r\n  // SHA-256 hash\r\n  static async sha256(data: string): Promise<string> {\r\n    const dataBuffer = this.stringToArrayBuffer(data);\r\n    const hashBuffer = await crypto.subtle.digest('SHA-256', dataBuffer);\r\n    return this.arrayBufferToBase64(hashBuffer);\r\n  }\r\n\r\n  // Pad string to 16-byte blocks\r\n  private static pad(s: string): string {\r\n    const blockSize = 16;\r\n    const remainder = s.length % blockSize;\r\n    const paddingNeeded = blockSize - remainder;\r\n    return s + ' '.repeat(paddingNeeded);\r\n  }\r\n\r\n  // Unpad string\r\n  private static unpad(s: string): string {\r\n    return s.trim();\r\n  }\r\n}\r\n\r\n// Real Kyber implementation via backend API\r\nexport class RealKyber {\r\n  private static readonly API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000/quantserver';\r\n\r\n  // Generate real Kyber keypair via backend\r\n  static async keygen(): Promise<KyberKeyPair> {\r\n    const response = await fetch(`${this.API_BASE_URL}/kyber-keygen`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to generate Kyber keypair');\r\n    }\r\n\r\n    const data = await response.json();\r\n    if (data.Status === 'Positive') {\r\n      return {\r\n        publicKey: data.public_key,\r\n        privateKey: data.private_key\r\n      };\r\n    } else {\r\n      throw new Error(data.Message || 'Key generation failed');\r\n    }\r\n  }\r\n\r\n  // Encrypt using real Kyber via backend\r\n  static async encrypt(message: string, receiverPublicKey: string): Promise<EncryptedData> {\r\n    console.log('Encrypt parameters:', { message, receiverPublicKey });\r\n\r\n    const response = await fetch(`${this.API_BASE_URL}/kyber-encrypt`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        message,\r\n        receiver_public_key: receiverPublicKey\r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      console.error('Encrypt response error:', response.status, errorText);\r\n      throw new Error(`Failed to encrypt message: ${response.status} - ${errorText}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log('Encrypt response data:', data);\r\n\r\n    if (data.Status === 'Positive') {\r\n      console.log('Encrypted data structure:', data.encrypted_data);\r\n      return data.encrypted_data;\r\n    } else {\r\n      throw new Error(data.Message || 'Encryption failed');\r\n    }\r\n  }\r\n\r\n  // Decrypt using real Kyber via backend\r\n  static async decrypt(tag: string, concatenated_string: string, username: string): Promise<string> {\r\n    // Get the user's private key from localStorage\r\n    const userData = UserStorage.getUserData();\r\n    if (!userData || !userData.privateKey) {\r\n      throw new Error('User private key not found. Please log in again.');\r\n    }\r\n\r\n    console.log('Decrypt parameters:', { tag, concatenated_string, username, hasPrivateKey: !!userData.privateKey });\r\n\r\n    const requestBody = {\r\n      tag,\r\n      concatenated_string: concatenated_string,\r\n      username,\r\n      private_key: userData.privateKey\r\n    };\r\n\r\n    console.log('Request body:', requestBody);\r\n\r\n    const response = await fetch(`${this.API_BASE_URL}/kyber-decrypt`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(requestBody),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      console.error('Response error:', response.status, errorText);\r\n      throw new Error(`Failed to decrypt message: ${response.status} - ${errorText}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log('Response data:', data);\r\n\r\n    if (data.Status === 'Positive') {\r\n      return data.decrypted_message;\r\n    } else {\r\n      throw new Error(data.Message || 'Decryption failed');\r\n    }\r\n  }\r\n}\r\n\r\n// Main encryption function using real Kyber\r\nexport async function encrypt(message: string, receiverKyberPublicKey: string): Promise<EncryptedData> {\r\n  return await RealKyber.encrypt(message, receiverKyberPublicKey);\r\n}\r\n\r\n// Main decryption function using real Kyber\r\nexport async function decrypt(\r\n  tag: string, \r\n  concatenated_string: string, \r\n  username: string\r\n): Promise<string> {\r\n  return await RealKyber.decrypt(tag, concatenated_string, username);\r\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 245, "column": 0}, "map": {"version":3,"sources":["file:///D:/3rd%20Year/Projects/Project-Xpo/qsa%20-%20Copy/quant-sec-web/src/app/compose/page.tsx"],"sourcesContent":["'use client';\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport {\n  Box,\n  Button,\n  TextField,\n  Typography,\n  Container,\n  Alert,\n  Paper,\n  CircularProgress,\n  Chip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n} from '@mui/material';\nimport { Send, Person, CheckCircle, Error } from '@mui/icons-material';\nimport { UserStorage, ApiClient } from '@/lib/api';\nimport { encrypt } from '@/lib/crypto';\n\nexport default function ComposePage() {\n  const router = useRouter();\n  const [userData, setUserData] = useState<any>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n  \n  // Form data\n  const [recipient, setRecipient] = useState('');\n  const [subject, setSubject] = useState('');\n  const [message, setMessage] = useState('');\n  \n  // Validation\n  const [recipientError, setRecipientError] = useState('');\n  const [subjectError, setSubjectError] = useState('');\n  const [messageError, setMessageError] = useState('');\n  \n  // Recipient validation\n  const [recipientValidating, setRecipientValidating] = useState(false);\n  const [recipientValid, setRecipientValid] = useState<boolean | null>(null);\n  const [recipientName, setRecipientName] = useState<string | null>(null);\n\n  useEffect(() => {\n    const data = UserStorage.getUserData();\n    if (!data) {\n      router.push('/login');\n      return;\n    }\n    setUserData(data);\n  }, [router]);\n\n  const validateRecipient = async (identifier: string) => {\n    if (!identifier.trim()) {\n      setRecipientError('Recipient email or username is required');\n      setRecipientValid(null);\n      return;\n    }\n    \n    setRecipientValidating(true);\n    setRecipientError('');\n    \n    try {\n      const userInfo = await ApiClient.getUserPublicKey(identifier);\n      if (userInfo) {\n        setRecipientValid(true);\n        setRecipientName(userInfo.name);\n        setRecipientError('');\n      } else {\n        setRecipientValid(false);\n        setRecipientError('User not found');\n        setRecipientName(null);\n      }\n    } catch (err) {\n      setRecipientValid(false);\n      setRecipientError('Failed to validate recipient');\n      setRecipientName(null);\n    } finally {\n      setRecipientValidating(false);\n    }\n  };\n\n  const handleRecipientChange = (value: string) => {\n    setRecipient(value);\n    setRecipientValid(null);\n    setRecipientName(null);\n    \n    // Clear previous timeout\n    if (window.recipientValidationTimeout) {\n      clearTimeout(window.recipientValidationTimeout);\n    }\n    \n    // Debounce validation\n    window.recipientValidationTimeout = setTimeout(() => {\n      if (value.trim()) {\n        validateRecipient(value);\n      }\n    }, 500);\n  };\n\n  const validateForm = (): boolean => {\n    let isValid = true;\n    \n    // Reset errors\n    setRecipientError('');\n    setSubjectError('');\n    setMessageError('');\n    \n    // Validate recipient\n    if (!recipient.trim()) {\n      setRecipientError('Recipient email or username is required');\n      isValid = false;\n    } else if (recipientValid === false) {\n      setRecipientError('Invalid recipient');\n      isValid = false;\n    }\n    \n    // Validate subject\n    if (!subject.trim()) {\n      setSubjectError('Subject is required');\n      isValid = false;\n    }\n    \n    // Validate message\n    if (!message.trim()) {\n      setMessageError('Message is required');\n      isValid = false;\n    }\n    \n    return isValid;\n  };\n\n  const handleSend = async () => {\n    if (!validateForm() || !userData) {\n      return;\n    }\n    \n    setLoading(true);\n    setError(null);\n    setSuccess(null);\n    \n    try {\n      // Get recipient's public key\n      const recipientInfo = await ApiClient.getUserPublicKey(recipient);\n      if (!recipientInfo) {\n        setError('Recipient not found');\n        return;\n      }\n      \n      // Encrypt subject and message\n      const encryptedSubject = await encrypt(subject, recipientInfo.publicKey);\n      const encryptedBody = await encrypt(message, recipientInfo.publicKey);\n      \n      // Send the email\n      const success = await ApiClient.sendEmail(\n        recipient,\n        userData.email || userData.username,\n        JSON.stringify(encryptedSubject),\n        JSON.stringify(encryptedBody),\n        userData.password\n      );\n      \n      if (success) {\n        setSuccess(`Message sent successfully to ${recipientName || recipient}!`);\n        // Clear form\n        setRecipient('');\n        setSubject('');\n        setMessage('');\n        setRecipientValid(null);\n        setRecipientName(null);\n      } else {\n        setError('Failed to send message. Please try again.');\n      }\n      \n    } catch (err) {\n      setError('Failed to send message. Please try again.');\n      console.error('Send email error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && e.ctrlKey) {\n      handleSend();\n    }\n  };\n\n  if (!userData) {\n    return (\n      <Container maxWidth=\"md\" sx={{ mt: 4 }}>\n        <Typography>Loading...</Typography>\n      </Container>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"md\" sx={{ mt: 4 }}>\n      <Paper sx={{ p: 4 }}>\n        <Typography variant=\"h4\" gutterBottom>\n          Compose Email\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 4 }}>\n          Send an encrypted message to another user\n        </Typography>\n\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\n            {error}\n          </Alert>\n        )}\n\n        {success && (\n          <Alert severity=\"success\" sx={{ mb: 2 }}>\n            {success}\n          </Alert>\n        )}\n\n        <Box sx={{ mt: 2 }}>\n          {/* Recipient Field */}\n          <TextField\n            fullWidth\n            label=\"To (Email or Username)\"\n            value={recipient}\n            onChange={(e) => handleRecipientChange(e.target.value)}\n            error={!!recipientError}\n            helperText={recipientError}\n            margin=\"normal\"\n            disabled={loading}\n            InputProps={{\n              endAdornment: recipientValidating ? (\n                <CircularProgress size={20} />\n              ) : recipientValid ? (\n                <CheckCircle color=\"success\" />\n              ) : recipientValid === false ? (\n                <Error color=\"error\" />\n              ) : null,\n            }}\n          />\n          \n          {recipientName && (\n            <Chip\n              icon={<Person />}\n              label={recipientName}\n              color=\"primary\"\n              variant=\"outlined\"\n              sx={{ mt: 1 }}\n            />\n          )}\n\n          {/* Subject Field */}\n          <TextField\n            fullWidth\n            label=\"Subject\"\n            value={subject}\n            onChange={(e) => setSubject(e.target.value)}\n            error={!!subjectError}\n            helperText={subjectError}\n            margin=\"normal\"\n            disabled={loading}\n          />\n\n          {/* Message Field */}\n          <TextField\n            fullWidth\n            label=\"Message\"\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n            error={!!messageError}\n            helperText={messageError}\n            margin=\"normal\"\n            multiline\n            rows={8}\n            disabled={loading}\n            onKeyDown={handleKeyDown}\n            placeholder=\"Type your message here... (Ctrl+Enter to send)\"\n          />\n        </Box>\n\n        <Box sx={{ mt: 4, display: 'flex', gap: 2 }}>\n          <Button\n            variant=\"contained\"\n            startIcon={<Send />}\n            onClick={handleSend}\n            disabled={loading || recipientValid !== true}\n            size=\"large\"\n          >\n            {loading ? 'Sending...' : 'Send Message'}\n          </Button>\n          \n          <Button\n            variant=\"outlined\"\n            onClick={() => router.push('/')}\n            disabled={loading}\n          >\n            Cancel\n          </Button>\n        </Box>\n\n        {/* Security Info */}\n        <Box sx={{ mt: 4, p: 2, bgcolor: 'grey.50', borderRadius: 1 }}>\n          <Typography variant=\"subtitle2\" gutterBottom>\n            🔒 Message Security\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            • Your message will be encrypted using the recipient's public key\n            • Only the recipient can decrypt and read the message\n            • Message integrity is verified using HMAC-SHA256\n            • The server cannot read your encrypted messages\n          </Typography>\n        </Box>\n      </Paper>\n    </Container>\n  );\n} "],"names":[],"mappings":"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","debugId":null}}]
}