{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///D:/projs/qsa/quant-sec-web/src/lib/api.ts"],"sourcesContent":["// API client for communicating with the Django backend\n\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000/quantserver';\n\nexport interface User {\n  name: string;\n  username: string;\n  publicKey: string;\n}\n\nexport interface Email {\n  sender: string;\n  sender_email?: string;\n  sender_name?: string;\n  receiver: string;\n  datetime_of_arrival: string;\n  encrypted_subject: string;\n  encrypted_body: string;\n}\n\nexport interface ApiResponse<T = any> {\n  Message: string;\n  Status: 'Positive' | 'Negative';\n  [key: string]: any;\n}\n\nexport class ApiClient {\n  private static async request<T>(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<ApiResponse<T>> {\n    const url = `${API_BASE_URL}/${endpoint}`;\n    \n    const response = await fetch(url, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    return response.json();\n  }\n\n  // Check if username is unique\n  static async checkUsernameUniqueness(username: string): Promise<boolean> {\n    const response = await this.request(`check-uniqueness?username=${encodeURIComponent(username)}`, {\n      method: 'GET',\n    });\n    \n    // If Status is \"Positive\", the user doesn't exist (username is unique)\n    return response.Status === 'Positive';\n  }\n\n  // Register a new user\n  static async registerUser(\n    name: string,\n    email: string,\n    username: string,\n    publicKey: string,\n    password: string\n  ): Promise<boolean> {\n    const response = await this.request('register-user', {\n      method: 'POST',\n      body: JSON.stringify({\n        name,\n        email,\n        username,\n        public_key: publicKey,\n        password,\n      }),\n    });\n\n    return response.Status === 'Positive';\n  }\n\n  // Get user's public key\n  static async getUserPublicKey(username: string): Promise<{ name: string; publicKey: string } | null> {\n    const response = await this.request(`get-public-key?username=${encodeURIComponent(username)}`, {\n      method: 'GET',\n    });\n\n    if (response.Status === 'Positive') {\n      return {\n        name: response.Name,\n        publicKey: response['Public Key'],\n      };\n    }\n\n    return null;\n  }\n\n  // Login with email or username\n  static async loginUser(identifier: string, password: string): Promise<ApiResponse> {\n    return this.request('login-user', {\n      method: 'POST',\n      body: JSON.stringify({ identifier, password }),\n    });\n  }\n\n  // Send an email (receiver/sender can be email or username)\n  static async sendEmail(\n    receiverIdentifier: string,\n    senderIdentifier: string,\n    encryptedSubject: string,\n    encryptedBody: string,\n    password: string\n  ): Promise<boolean> {\n    const response = await this.request('post-email', {\n      method: 'POST',\n      body: JSON.stringify({\n        reciever_username: receiverIdentifier,\n        sender_username: senderIdentifier,\n        subject: encryptedSubject,\n        body: encryptedBody,\n        password,\n      }),\n    });\n    return response.Status === 'Positive';\n  }\n\n  // Get user's inbox (identifier can be email or username)\n  static async getInbox(identifier: string, password: string): Promise<Email[]> {\n    const response = await this.request(`get-inbox?username=${encodeURIComponent(identifier)}&password=${encodeURIComponent(password)}`, {\n      method: 'GET',\n    });\n    if (response.Status === 'Positive') {\n      return response.Emails || [];\n    }\n    return [];\n  }\n\n  // Clear user's inbox (identifier can be email or username)\n  static async clearInbox(identifier: string, password: string): Promise<boolean> {\n    const response = await this.request('clear-inbox', {\n      method: 'POST',\n      body: JSON.stringify({\n        username: identifier,\n        password,\n      }),\n    });\n    return response.Status === 'Positive';\n  }\n}\n\n// Local storage utilities for user data\nexport interface UserData {\n  name: string;\n  email: string;\n  username: string;\n  publicKey: string;\n  privateKey: string;\n  password: string;\n}\n\nexport class UserStorage {\n  private static readonly STORAGE_KEY = 'quantsec_user_data';\n\n  // Store user data securely\n  static storeUserData(userData: UserData): void {\n    try {\n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(userData));\n    } catch (error) {\n      console.error('Failed to store user data:', error);\n      throw new Error('Failed to store user data');\n    }\n  }\n\n  // Retrieve user data\n  static getUserData(): UserData | null {\n    try {\n      const data = localStorage.getItem(this.STORAGE_KEY);\n      return data ? JSON.parse(data) : null;\n    } catch (error) {\n      console.error('Failed to retrieve user data:', error);\n      return null;\n    }\n  }\n\n  // Check if user is logged in\n  static isLoggedIn(): boolean {\n    return this.getUserData() !== null;\n  }\n\n  // Get current user\n  static getCurrentUser(): UserData | null {\n    return this.getUserData();\n  }\n\n  // Clear user data (logout)\n  static clearUserData(): void {\n    try {\n      localStorage.removeItem(this.STORAGE_KEY);\n    } catch (error) {\n      console.error('Failed to clear user data:', error);\n    }\n  }\n\n  // Update user data (e.g., after key import/export)\n  static updateUserData(updates: Partial<UserData>): void {\n    const currentData = this.getUserData();\n    if (currentData) {\n      const updatedData = { ...currentData, ...updates };\n      this.storeUserData(updatedData);\n    }\n  }\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 168, "column": 0}, "map": {"version":3,"sources":["file:///D:/projs/qsa/quant-sec-web/src/lib/crypto.ts"],"sourcesContent":["// Crypto utilities for the Quantum Secure Email Client\r\n// Uses Web Crypto API for AES-256, HMAC-SHA256, and scrypt for key derivation\r\n// Uses real Crystal-Kyber via backend API\r\n\r\nexport interface KyberKeyPair {\r\n  publicKey: string; // base64 encoded\r\n  privateKey: string; // base64 encoded\r\n}\r\n\r\nexport interface EncryptedData {\r\n  tag: string; // HMAC-SHA256 hash\r\n  concatenatedString: string; // JSON string with salt, cipher_text, encrypted_passkey, iv\r\n}\r\n\r\nexport interface AESEncryptedData {\r\n  cipher_text: string; // base64 encoded\r\n  salt: string; // base64 encoded\r\n  iv: string; // base64 encoded IV\r\n}\r\n\r\n// Web Crypto API utilities\r\nexport class CryptoUtils {\r\n  // Generate random bytes\r\n  static async randomBytes(length: number): Promise<Uint8Array> {\r\n    return crypto.getRandomValues(new Uint8Array(length));\r\n  }\r\n\r\n  // Convert ArrayBuffer to base64\r\n  static arrayBufferToBase64(buffer: ArrayBuffer): string {\r\n    const bytes = new Uint8Array(buffer);\r\n    let binary = '';\r\n    for (let i = 0; i < bytes.byteLength; i++) {\r\n      binary += String.fromCharCode(bytes[i]);\r\n    }\r\n    return btoa(binary);\r\n  }\r\n\r\n  // Convert base64 to ArrayBuffer\r\n  static base64ToArrayBuffer(base64: string): ArrayBuffer {\r\n    const binaryString = atob(base64);\r\n    const bytes = new Uint8Array(binaryString.length);\r\n    for (let i = 0; i < binaryString.length; i++) {\r\n      bytes[i] = binaryString.charCodeAt(i);\r\n    }\r\n    return bytes.buffer;\r\n  }\r\n\r\n  // Convert string to ArrayBuffer\r\n  static stringToArrayBuffer(str: string): ArrayBuffer {\r\n    const encoder = new TextEncoder();\r\n    return encoder.encode(str).buffer;\r\n  }\r\n\r\n  // Convert ArrayBuffer to string\r\n  static arrayBufferToString(buffer: ArrayBuffer): string {\r\n    const decoder = new TextDecoder();\r\n    return decoder.decode(buffer);\r\n  }\r\n\r\n  // Derive key using scrypt (using scrypt-js library)\r\n  static async deriveKey(password: string, salt: Uint8Array, keyLength: number = 32): Promise<Uint8Array> {\r\n    // Import scrypt-js dynamically\r\n    const { scrypt } = await import('scrypt-js');\r\n    \r\n    const passwordBuffer = this.stringToArrayBuffer(password);\r\n    const derivedKey = await scrypt(\r\n      new Uint8Array(passwordBuffer),\r\n      salt,\r\n      16384, // N = 2^14\r\n      8,     // r = 8\r\n      1,     // p = 1\r\n      keyLength\r\n    );\r\n    \r\n    return derivedKey;\r\n  }\r\n\r\n  // AES-256 encryption using Web Crypto API with secure IV\r\n  static async aesEncrypt(plaintext: string, passkey: string): Promise<AESEncryptedData> {\r\n    const salt = await this.randomBytes(16);\r\n    const iv = await this.randomBytes(16); // ✅ Secure random IV\r\n    const key = await this.deriveKey(passkey, salt);\r\n    \r\n    // Import the key\r\n    const cryptoKey = await crypto.subtle.importKey(\r\n      'raw',\r\n      key,\r\n      { name: 'AES-CBC' },\r\n      false,\r\n      ['encrypt']\r\n    );\r\n\r\n    // Pad the plaintext to 16-byte blocks\r\n    const paddedText = this.pad(plaintext);\r\n    const plaintextBuffer = this.stringToArrayBuffer(paddedText);\r\n    \r\n    // Encrypt\r\n    const encryptedBuffer = await crypto.subtle.encrypt(\r\n      { name: 'AES-CBC', iv },\r\n      cryptoKey,\r\n      plaintextBuffer\r\n    );\r\n\r\n    return {\r\n      cipher_text: this.arrayBufferToBase64(encryptedBuffer),\r\n      salt: this.arrayBufferToBase64(salt),\r\n      iv: this.arrayBufferToBase64(iv) // ✅ Include IV in output\r\n    };\r\n  }\r\n\r\n  // AES-256 decryption using Web Crypto API with IV\r\n  static async aesDecrypt(encryptedData: AESEncryptedData, passkey: string): Promise<string> {\r\n    const salt = new Uint8Array(this.base64ToArrayBuffer(encryptedData.salt));\r\n    const iv = new Uint8Array(this.base64ToArrayBuffer(encryptedData.iv)); // ✅ Use provided IV\r\n    const key = await this.deriveKey(passkey, salt);\r\n    \r\n    // Import the key\r\n    const cryptoKey = await crypto.subtle.importKey(\r\n      'raw',\r\n      key,\r\n      { name: 'AES-CBC' },\r\n      false,\r\n      ['decrypt']\r\n    );\r\n\r\n    const encryptedBuffer = this.base64ToArrayBuffer(encryptedData.cipher_text);\r\n    \r\n    // Decrypt\r\n    const decryptedBuffer = await crypto.subtle.decrypt(\r\n      { name: 'AES-CBC', iv },\r\n      cryptoKey,\r\n      encryptedBuffer\r\n    );\r\n\r\n    const decryptedText = this.arrayBufferToString(decryptedBuffer);\r\n    return this.unpad(decryptedText);\r\n  }\r\n\r\n  // HMAC-SHA256 - ✅ Proper HMAC implementation\r\n  static async hmacSha256(data: string, key: string): Promise<string> {\r\n    const keyBuffer = this.stringToArrayBuffer(key);\r\n    const dataBuffer = this.stringToArrayBuffer(data);\r\n    \r\n    const cryptoKey = await crypto.subtle.importKey(\r\n      'raw',\r\n      keyBuffer,\r\n      { name: 'HMAC', hash: 'SHA-256' },\r\n      false,\r\n      ['sign']\r\n    );\r\n    \r\n    const signature = await crypto.subtle.sign(\r\n      'HMAC',\r\n      cryptoKey,\r\n      dataBuffer\r\n    );\r\n    \r\n    return this.arrayBufferToBase64(signature);\r\n  }\r\n\r\n  // SHA-256 hash\r\n  static async sha256(data: string): Promise<string> {\r\n    const dataBuffer = this.stringToArrayBuffer(data);\r\n    const hashBuffer = await crypto.subtle.digest('SHA-256', dataBuffer);\r\n    return this.arrayBufferToBase64(hashBuffer);\r\n  }\r\n\r\n  // Pad string to 16-byte blocks\r\n  private static pad(s: string): string {\r\n    const blockSize = 16;\r\n    const remainder = s.length % blockSize;\r\n    const paddingNeeded = blockSize - remainder;\r\n    return s + ' '.repeat(paddingNeeded);\r\n  }\r\n\r\n  // Unpad string\r\n  private static unpad(s: string): string {\r\n    return s.trim();\r\n  }\r\n}\r\n\r\n// Real Kyber implementation via backend API\r\nexport class RealKyber {\r\n  private static readonly API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000/quantserver';\r\n\r\n  // Generate real Kyber keypair via backend\r\n  static async keygen(): Promise<KyberKeyPair> {\r\n    const response = await fetch(`${this.API_BASE_URL}/kyber-keygen`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to generate Kyber keypair');\r\n    }\r\n\r\n    const data = await response.json();\r\n    if (data.Status === 'Positive') {\r\n      return {\r\n        publicKey: data.public_key,\r\n        privateKey: data.private_key\r\n      };\r\n    } else {\r\n      throw new Error(data.Message || 'Key generation failed');\r\n    }\r\n  }\r\n\r\n  // Encrypt using real Kyber via backend\r\n  static async encrypt(message: string, receiverPublicKey: string): Promise<EncryptedData> {\r\n    const response = await fetch(`${this.API_BASE_URL}/kyber-encrypt`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        message,\r\n        receiver_public_key: receiverPublicKey\r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to encrypt message');\r\n    }\r\n\r\n    const data = await response.json();\r\n    if (data.Status === 'Positive') {\r\n      return data.encrypted_data;\r\n    } else {\r\n      throw new Error(data.Message || 'Encryption failed');\r\n    }\r\n  }\r\n\r\n  // Decrypt using real Kyber via backend\r\n  static async decrypt(tag: string, concatenatedString: string, username: string): Promise<string> {\r\n    const response = await fetch(`${this.API_BASE_URL}/kyber-decrypt`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        tag,\r\n        concatenated_string: concatenatedString,\r\n        username\r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to decrypt message');\r\n    }\r\n\r\n    const data = await response.json();\r\n    if (data.Status === 'Positive') {\r\n      return data.decrypted_message;\r\n    } else {\r\n      throw new Error(data.Message || 'Decryption failed');\r\n    }\r\n  }\r\n}\r\n\r\n// Main encryption function using real Kyber\r\nexport async function encrypt(message: string, receiverKyberPublicKey: string): Promise<EncryptedData> {\r\n  return await RealKyber.encrypt(message, receiverKyberPublicKey);\r\n}\r\n\r\n// Main decryption function using real Kyber\r\nexport async function decrypt(\r\n  tag: string, \r\n  concatenatedString: string, \r\n  username: string\r\n): Promise<string> {\r\n  return await RealKyber.decrypt(tag, concatenatedString, username);\r\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 379, "column": 0}, "map": {"version":3,"sources":["file:///D:/projs/qsa/quant-sec-web/src/app/inbox/page.tsx"],"sourcesContent":["'use client';\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport {\n  Box,\n  Button,\n  Typography,\n  Container,\n  Alert,\n  Paper,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemAvatar,\n  Avatar,\n  Chip,\n  Divider,\n  CircularProgress,\n  IconButton,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n} from '@mui/material';\nimport Refresh from '@mui/icons-material/Refresh';\nimport Delete from '@mui/icons-material/Delete';\nimport Visibility from '@mui/icons-material/Visibility';\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\nimport Warning from '@mui/icons-material/Warning';\nimport CheckCircle from '@mui/icons-material/CheckCircle';\nimport ErrorIcon from '@mui/icons-material/Error';\nimport { UserStorage, ApiClient, Email } from '@/lib/api';\nimport { decrypt } from '@/lib/crypto';\n\ninterface DecryptedEmail {\n  id: string;\n  sender: string;\n  sender_email?: string;\n  sender_name?: string;\n  subject: string;\n  body: string;\n  datetime: string;\n  macVerified: boolean;\n  macError?: string;\n}\n\nexport default function InboxPage() {\n  const router = useRouter();\n  const [userData, setUserData] = useState<any>(null);\n  const [emails, setEmails] = useState<DecryptedEmail[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedEmail, setSelectedEmail] = useState<DecryptedEmail | null>(null);\n  const [showBody, setShowBody] = useState<{ [key: string]: boolean }>({});\n\n  useEffect(() => {\n    const data = UserStorage.getUserData();\n    if (!data) {\n      router.push('/login');\n      return;\n    }\n    setUserData(data);\n    fetchEmails(data);\n  }, [router]);\n\n  const fetchEmails = async (user: any) => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const encryptedEmails = await ApiClient.getInbox(user.username, user.password);\n      const decryptedEmails: DecryptedEmail[] = [];\n      \n      for (const email of encryptedEmails) {\n        try {\n          // Parse the encrypted data\n          const encryptedSubject = JSON.parse(email.encrypted_subject);\n          const encryptedBody = JSON.parse(email.encrypted_body);\n          \n          // Decrypt subject and body using real Kyber\n          const decryptedSubject = await decrypt(\n            encryptedSubject.tag,\n            encryptedSubject.concatenated_string,\n            user.username\n          );\n          \n          const decryptedBody = await decrypt(\n            encryptedBody.tag,\n            encryptedBody.concatenated_string,\n            user.username\n          );\n          \n          decryptedEmails.push({\n            id: email.id || Math.random().toString(),\n            sender: email.sender,\n            sender_email: email.sender_email,\n            sender_name: email.sender_name,\n            subject: decryptedSubject,\n            body: decryptedBody,\n            datetime: email.datetime_of_arrival,\n            macVerified: true\n          });\n          \n        } catch (decryptError) {\n          // If decryption fails, add email with error flag\n          decryptedEmails.push({\n            id: email.id || Math.random().toString(),\n            sender: email.sender,\n            sender_email: email.sender_email,\n            sender_name: email.sender_name,\n            subject: '[DECRYPTION FAILED]',\n            body: 'This message could not be decrypted. It may have been tampered with or the sender\\'s key has changed.',\n            datetime: email.datetime_of_arrival,\n            macVerified: false,\n            macError: decryptError instanceof Error ? decryptError.message : 'Unknown error'\n          });\n        }\n      }\n      \n      setEmails(decryptedEmails);\n      \n    } catch (err) {\n      setError('Failed to fetch emails. Please try again.');\n      console.error('Fetch emails error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRefresh = () => {\n    if (userData) {\n      fetchEmails(userData);\n    }\n  };\n\n  const handleClearInbox = async () => {\n    if (!userData) return;\n    \n    setLoading(true);\n    try {\n      const success = await ApiClient.clearInbox(userData.username, userData.password);\n      if (success) {\n        setEmails([]);\n      } else {\n        setError('Failed to clear inbox.');\n      }\n    } catch (err) {\n      setError('Failed to clear inbox.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleViewEmail = (email: DecryptedEmail) => {\n    setSelectedEmail(email);\n  };\n\n  const toggleShowBody = (emailId: string) => {\n    setShowBody(prev => ({\n      ...prev,\n      [emailId]: !prev[emailId]\n    }));\n  };\n\n  const formatDateTime = (dateTimeStr: string) => {\n    try {\n      const date = new Date(dateTimeStr);\n      return date.toLocaleString();\n    } catch {\n      return dateTimeStr;\n    }\n  };\n\n  if (!userData) {\n    return (\n      <Container maxWidth=\"md\" sx={{ mt: 4 }}>\n        <Typography>Loading...</Typography>\n      </Container>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"md\" sx={{ mt: 4 }}>\n      <Paper sx={{ p: 4 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n          <Typography variant=\"h4\">\n            Inbox\n          </Typography>\n          <Box sx={{ display: 'flex', gap: 1 }}>\n            <Button\n              variant=\"outlined\"\n              startIcon={<Refresh />}\n              onClick={handleRefresh}\n              disabled={loading}\n            >\n              Refresh\n            </Button>\n            <Button\n              variant=\"outlined\"\n              color=\"error\"\n              startIcon={<Delete />}\n              onClick={handleClearInbox}\n              disabled={loading}\n            >\n              Clear All\n            </Button>\n          </Box>\n        </Box>\n\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\n            {error}\n          </Alert>\n        )}\n\n        {loading && (\n          <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>\n            <CircularProgress />\n          </Box>\n        )}\n\n        {!loading && emails.length === 0 && (\n          <Box sx={{ textAlign: 'center', py: 4 }}>\n            <Typography variant=\"h6\" color=\"text.secondary\">\n              No messages in your inbox\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\n              Messages will appear here once you receive encrypted emails from other users.\n            </Typography>\n          </Box>\n        )}\n\n        {!loading && emails.length > 0 && (\n          <List>\n            {emails.map((email, index) => (\n              <Box key={email.id}>\n                <ListItem alignItems=\"flex-start\">\n                  <ListItemAvatar>\n                    <Avatar>\n                      {email.sender.charAt(0).toUpperCase()}\n                    </Avatar>\n                  </ListItemAvatar>\n                  <ListItemText\n                    primary={\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                        <Typography variant=\"subtitle1\" component=\"span\">\n                          {email.subject}\n                        </Typography>\n                        {email.macVerified ? (\n                          <CheckCircle color=\"success\" fontSize=\"small\" />\n                        ) : (\n                          <ErrorIcon color=\"error\" fontSize=\"small\" />\n                        )}\n                      </Box>\n                    }\n                    secondary={\n                      <>\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          From: {email.sender_name ? `${email.sender_name} <${email.sender_email}>` : email.sender_email || email.sender}\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          {formatDateTime(email.datetime)}\n                        </Typography>\n                        {!email.macVerified && (\n                          <Chip\n                            icon={<Warning />}\n                            label=\"MAC Verification Failed\"\n                            color=\"error\"\n                            size=\"small\"\n                            sx={{ mt: 1 }}\n                          />\n                        )}\n                        {showBody[email.id] && (\n                          <Typography variant=\"body2\" sx={{ mt: 2, whiteSpace: 'pre-wrap' }}>\n                            {email.body}\n                          </Typography>\n                        )}\n                      </>\n                    }\n                  />\n                  <Box sx={{ display: 'flex', gap: 1 }}>\n                    <IconButton\n                      onClick={() => toggleShowBody(email.id)}\n                      size=\"small\"\n                    >\n                      {showBody[email.id] ? <VisibilityOff /> : <Visibility />}\n                    </IconButton>\n                    <Button\n                      size=\"small\"\n                      onClick={() => handleViewEmail(email)}\n                    >\n                      View\n                    </Button>\n                  </Box>\n                </ListItem>\n                {index < emails.length - 1 && <Divider variant=\"inset\" component=\"li\" />}\n              </Box>\n            ))}\n          </List>\n        )}\n      </Paper>\n\n      {/* Email Detail Dialog */}\n      <Dialog\n        open={!!selectedEmail}\n        onClose={() => setSelectedEmail(null)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        {selectedEmail && (\n          <>\n            <DialogTitle>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                {selectedEmail.subject}\n                {selectedEmail.macVerified ? (\n                  <CheckCircle color=\"success\" />\n                ) : (\n                  <ErrorIcon color=\"error\" />\n                )}\n              </Box>\n            </DialogTitle>\n            <DialogContent>\n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                From: {selectedEmail.sender_name ? `${selectedEmail.sender_name} <${selectedEmail.sender_email}>` : selectedEmail.sender_email || selectedEmail.sender}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\n                {formatDateTime(selectedEmail.datetime)}\n              </Typography>\n              {!selectedEmail.macVerified && (\n                <Alert severity=\"warning\" sx={{ mb: 2 }}>\n                  <Typography variant=\"body2\">\n                    <strong>Warning:</strong> This message failed MAC verification. \n                    It may have been tampered with or the sender's key has changed.\n                  </Typography>\n                  {selectedEmail.macError && (\n                    <Typography variant=\"caption\" sx={{ mt: 1, display: 'block' }}>\n                      Error: {selectedEmail.macError}\n                    </Typography>\n                  )}\n                </Alert>\n              )}\n              <Typography variant=\"body1\" sx={{ whiteSpace: 'pre-wrap' }}>\n                {selectedEmail.body}\n              </Typography>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={() => setSelectedEmail(null)}>\n                Close\n              </Button>\n            </DialogActions>\n          </>\n        )}\n      </Dialog>\n    </Container>\n  );\n} "],"names":[],"mappings":"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","debugId":null}}]
}