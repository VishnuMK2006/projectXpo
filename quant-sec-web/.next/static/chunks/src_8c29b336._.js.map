{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///D:/3rd%20Year/Projects/Project-Xpo/qsa%20-%20Copy/quant-sec-web/src/lib/crypto.ts"],"sourcesContent":["// Crypto utilities for the Quantum Secure Email Client\r\n// Uses Web Crypto API for AES-256, HMAC-SHA256, and scrypt for key derivation\r\n// Uses real Crystal-Kyber via backend API\r\n\r\nimport { UserStorage } from './api';\r\n\r\nexport interface KyberKeyPair {\r\n  publicKey: string; // base64 encoded\r\n  privateKey: string; // base64 encoded\r\n}\r\n\r\nexport interface EncryptedData {\r\n  tag: string; // HMAC-SHA256 hash\r\n  concatenated_string: string; // JSON string with salt, cipher_text, encrypted_passkey, iv (snake_case to match backend)\r\n}\r\n\r\nexport interface AESEncryptedData {\r\n  cipher_text: string; // base64 encoded\r\n  salt: string; // base64 encoded\r\n  iv: string; // base64 encoded IV\r\n}\r\n\r\n// Web Crypto API utilities\r\nexport class CryptoUtils {\r\n  // Generate random bytes\r\n  static async randomBytes(length: number): Promise<Uint8Array> {\r\n    return crypto.getRandomValues(new Uint8Array(length));\r\n  }\r\n\r\n  // Convert ArrayBuffer or Uint8Array to base64\r\n  static arrayBufferToBase64(buffer: ArrayBuffer | Uint8Array): string {\r\n    const bytes = buffer instanceof Uint8Array ? buffer : new Uint8Array(buffer);\r\n    let binary = '';\r\n    for (let i = 0; i < bytes.byteLength; i++) {\r\n      binary += String.fromCharCode(bytes[i]);\r\n    }\r\n    return btoa(binary);\r\n  }\r\n\r\n  // Convert base64 to ArrayBuffer\r\n  static base64ToArrayBuffer(base64: string): ArrayBuffer {\r\n    const binaryString = atob(base64);\r\n    const bytes = new Uint8Array(binaryString.length);\r\n    for (let i = 0; i < binaryString.length; i++) {\r\n      bytes[i] = binaryString.charCodeAt(i);\r\n    }\r\n    return bytes.buffer;\r\n  }\r\n\r\n  // Convert string to ArrayBuffer\r\n  static stringToArrayBuffer(str: string): ArrayBuffer {\r\n    const encoder = new TextEncoder();\r\n    const uint8Array = encoder.encode(str);\r\n    // Create a proper ArrayBuffer copy\r\n    const buffer = new ArrayBuffer(uint8Array.byteLength);\r\n    new Uint8Array(buffer).set(uint8Array);\r\n    return buffer;\r\n  }\r\n\r\n  // Convert ArrayBuffer to string\r\n  static arrayBufferToString(buffer: ArrayBuffer): string {\r\n    const decoder = new TextDecoder();\r\n    return decoder.decode(buffer);\r\n  }\r\n\r\n  // Derive key using scrypt (using scrypt-js library)\r\n  static async deriveKey(password: string, salt: Uint8Array, keyLength: number = 32): Promise<Uint8Array> {\r\n    // Import scrypt-js dynamically\r\n    const { scrypt } = await import('scrypt-js');\r\n    \r\n    const passwordBuffer = this.stringToArrayBuffer(password);\r\n    const derivedKey = await scrypt(\r\n      new Uint8Array(passwordBuffer),\r\n      salt,\r\n      16384, // N = 2^14\r\n      8,     // r = 8\r\n      1,     // p = 1\r\n      keyLength\r\n    );\r\n    \r\n    return derivedKey;\r\n  }\r\n\r\n  // AES-256 encryption using Web Crypto API with secure IV\r\n  static async aesEncrypt(plaintext: string, passkey: string): Promise<AESEncryptedData> {\r\n    const salt = await this.randomBytes(16);\r\n    const iv = await this.randomBytes(16); // ✅ Secure random IV\r\n    const key = await this.deriveKey(passkey, salt);\r\n    \r\n    // Import the key\r\n    const cryptoKey = await crypto.subtle.importKey(\r\n      'raw',\r\n      key,\r\n      { name: 'AES-CBC' },\r\n      false,\r\n      ['encrypt']\r\n    );\r\n\r\n    // Pad the plaintext to 16-byte blocks\r\n    const paddedText = this.pad(plaintext);\r\n    const plaintextBuffer = this.stringToArrayBuffer(paddedText);\r\n    \r\n    // Encrypt\r\n    const encryptedBuffer = await crypto.subtle.encrypt(\r\n      { name: 'AES-CBC', iv },\r\n      cryptoKey,\r\n      plaintextBuffer\r\n    );\r\n\r\n    return {\r\n      cipher_text: this.arrayBufferToBase64(encryptedBuffer),\r\n      salt: this.arrayBufferToBase64(salt),\r\n      iv: this.arrayBufferToBase64(iv) // ✅ Include IV in output\r\n    };\r\n  }\r\n\r\n  // AES-256 decryption using Web Crypto API with IV\r\n  static async aesDecrypt(encryptedData: AESEncryptedData, passkey: string): Promise<string> {\r\n    const salt = new Uint8Array(this.base64ToArrayBuffer(encryptedData.salt));\r\n    const iv = new Uint8Array(this.base64ToArrayBuffer(encryptedData.iv)); // ✅ Use provided IV\r\n    const key = await this.deriveKey(passkey, salt);\r\n    \r\n    // Import the key\r\n    const cryptoKey = await crypto.subtle.importKey(\r\n      'raw',\r\n      key,\r\n      { name: 'AES-CBC' },\r\n      false,\r\n      ['decrypt']\r\n    );\r\n\r\n    const encryptedBuffer = this.base64ToArrayBuffer(encryptedData.cipher_text);\r\n    \r\n    // Decrypt\r\n    const decryptedBuffer = await crypto.subtle.decrypt(\r\n      { name: 'AES-CBC', iv },\r\n      cryptoKey,\r\n      encryptedBuffer\r\n    );\r\n\r\n    const decryptedText = this.arrayBufferToString(decryptedBuffer);\r\n    return this.unpad(decryptedText);\r\n  }\r\n\r\n  // HMAC-SHA256 - ✅ Proper HMAC implementation\r\n  static async hmacSha256(data: string, key: string): Promise<string> {\r\n    const keyBuffer = this.stringToArrayBuffer(key);\r\n    const dataBuffer = this.stringToArrayBuffer(data);\r\n    \r\n    const cryptoKey = await crypto.subtle.importKey(\r\n      'raw',\r\n      keyBuffer,\r\n      { name: 'HMAC', hash: 'SHA-256' },\r\n      false,\r\n      ['sign']\r\n    );\r\n    \r\n    const signature = await crypto.subtle.sign(\r\n      'HMAC',\r\n      cryptoKey,\r\n      dataBuffer\r\n    );\r\n    \r\n    return this.arrayBufferToBase64(signature);\r\n  }\r\n\r\n  // SHA-256 hash\r\n  static async sha256(data: string): Promise<string> {\r\n    const dataBuffer = this.stringToArrayBuffer(data);\r\n    const hashBuffer = await crypto.subtle.digest('SHA-256', dataBuffer);\r\n    return this.arrayBufferToBase64(hashBuffer);\r\n  }\r\n\r\n  // Pad string to 16-byte blocks\r\n  private static pad(s: string): string {\r\n    const blockSize = 16;\r\n    const remainder = s.length % blockSize;\r\n    const paddingNeeded = blockSize - remainder;\r\n    return s + ' '.repeat(paddingNeeded);\r\n  }\r\n\r\n  // Unpad string\r\n  private static unpad(s: string): string {\r\n    return s.trim();\r\n  }\r\n}\r\n\r\n// Real Kyber implementation via backend API\r\nexport class RealKyber {\r\n  private static readonly API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000/quantserver';\r\n\r\n  // Generate real Kyber keypair via backend\r\n  static async keygen(): Promise<KyberKeyPair> {\r\n    const response = await fetch(`${this.API_BASE_URL}/kyber-keygen`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to generate Kyber keypair');\r\n    }\r\n\r\n    const data = await response.json();\r\n    if (data.Status === 'Positive') {\r\n      return {\r\n        publicKey: data.public_key,\r\n        privateKey: data.private_key\r\n      };\r\n    } else {\r\n      throw new Error(data.Message || 'Key generation failed');\r\n    }\r\n  }\r\n\r\n  // Encrypt using real Kyber via backend\r\n  static async encrypt(message: string, receiverPublicKey: string): Promise<EncryptedData> {\r\n    console.log('Encrypt parameters:', { message, receiverPublicKey });\r\n\r\n    const response = await fetch(`${this.API_BASE_URL}/kyber-encrypt`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        message,\r\n        receiver_public_key: receiverPublicKey\r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      console.error('Encrypt response error:', response.status, errorText);\r\n      throw new Error(`Failed to encrypt message: ${response.status} - ${errorText}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log('Encrypt response data:', data);\r\n\r\n    if (data.Status === 'Positive') {\r\n      console.log('Encrypted data structure:', data.encrypted_data);\r\n      return data.encrypted_data;\r\n    } else {\r\n      throw new Error(data.Message || 'Encryption failed');\r\n    }\r\n  }\r\n\r\n  // Decrypt using real Kyber via backend\r\n  static async decrypt(tag: string, concatenated_string: string, username: string): Promise<string> {\r\n    // Get the user's private key from localStorage\r\n    const userData = UserStorage.getUserData();\r\n    if (!userData || !userData.privateKey) {\r\n      throw new Error('User private key not found. Please log in again.');\r\n    }\r\n\r\n    console.log('Decrypt parameters:', { tag, concatenated_string, username, hasPrivateKey: !!userData.privateKey });\r\n\r\n    const requestBody = {\r\n      tag,\r\n      concatenated_string: concatenated_string,\r\n      username,\r\n      private_key: userData.privateKey\r\n    };\r\n\r\n    console.log('Request body:', requestBody);\r\n\r\n    const response = await fetch(`${this.API_BASE_URL}/kyber-decrypt`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(requestBody),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      console.error('Response error:', response.status, errorText);\r\n      throw new Error(`Failed to decrypt message: ${response.status} - ${errorText}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log('Response data:', data);\r\n\r\n    if (data.Status === 'Positive') {\r\n      return data.decrypted_message;\r\n    } else {\r\n      throw new Error(data.Message || 'Decryption failed');\r\n    }\r\n  }\r\n}\r\n\r\n// Main encryption function using real Kyber\r\nexport async function encrypt(message: string, receiverKyberPublicKey: string): Promise<EncryptedData> {\r\n  return await RealKyber.encrypt(message, receiverKyberPublicKey);\r\n}\r\n\r\n// Main decryption function using real Kyber\r\nexport async function decrypt(\r\n  tag: string, \r\n  concatenated_string: string, \r\n  username: string\r\n): Promise<string> {\r\n  return await RealKyber.decrypt(tag, concatenated_string, username);\r\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 249, "column": 0}, "map": {"version":3,"sources":["file:///D:/3rd%20Year/Projects/Project-Xpo/qsa%20-%20Copy/quant-sec-web/src/app/test/page.tsx"],"sourcesContent":["'use client';\nimport { useState } from 'react';\nimport { Box, Button, Typography, Container, Paper, TextField } from '@mui/material';\nimport { RealKyber, CryptoUtils } from '@/lib/crypto';\nimport { UserStorage } from '@/lib/api';\n\nexport default function TestPage() {\n  const [testResult, setTestResult] = useState<string>('');\n  const [loading, setLoading] = useState(false);\n\n  const runTests = async () => {\n    setLoading(true);\n    setTestResult('Running tests...\\n');\n    \n    try {\n      // Test 1: Real Kyber key generation\n      setTestResult(prev => prev + '1. Testing Real Kyber key generation...\\n');\n      const keyPair = await RealKyber.keygen();\n      setTestResult(prev => prev + `   ✓ Generated real Kyber keypair (Public: ${keyPair.publicKey.substring(0, 20)}...)\\n`);\n      \n      // Test 2: AES encryption/decryption\n      const testMessage = 'Hello, Quantum World!';\n      const encrypted = await CryptoUtils.aesEncrypt(testMessage, 'test-key');\n      const decrypted = await CryptoUtils.aesDecrypt(encrypted, 'test-key');\n      setTestResult(prev => prev + `   ✓ AES encryption/decryption: ${testMessage === decrypted ? 'PASS' : 'FAIL'}\\n`);\n      \n      // Test 3: SHA-256\n      setTestResult(prev => prev + '3. Testing SHA-256...\\n');\n      const hash = await CryptoUtils.sha256('test');\n      setTestResult(prev => prev + `   ✓ SHA-256 hash generated: ${hash.substring(0, 20)}...\\n`);\n      \n      // Test 4: Random bytes\n      setTestResult(prev => prev + '4. Testing random bytes...\\n');\n      const randomBytes = await CryptoUtils.randomBytes(32);\n      setTestResult(prev => prev + `   ✓ Generated ${randomBytes.length} random bytes\\n`);\n      \n      // Test 5: Real Kyber encryption/decryption\n      setTestResult(prev => prev + '5. Testing Real Kyber encryption/decryption...\\n');\n      \n      // First, store the test user's private key using UserStorage for the test\n      const testUserData = {\n        name: 'Test User',\n        username: 'testuser',\n        email: 'test@example.com',\n        password: 'testpassword',\n        privateKey: keyPair.privateKey,\n        publicKey: keyPair.publicKey\n      };\n      UserStorage.storeUserData(testUserData);\n      \n      const testMessage2 = 'Hello, Quantum World!';\n      const encryptedData = await RealKyber.encrypt(testMessage2, keyPair.publicKey);\n      const decryptedMessage = await RealKyber.decrypt(\n        encryptedData.tag,\n        encryptedData.concatenated_string,\n        'testuser'\n      );\n      setTestResult(prev => prev + `   ✓ Kyber encryption/decryption: ${testMessage2 === decryptedMessage ? 'PASS' : 'FAIL'}\\n`);\n      \n      // Clean up test data\n      UserStorage.clearUserData();\n      \n      setTestResult(prev => prev + '\\n All tests passed!\\n');\n      \n    } catch (error) {\n      setTestResult(prev => prev + `\\n❌ Test failed: ${error}\\n`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Container maxWidth=\"md\" sx={{ mt: 4 }}>\n      <Paper sx={{ p: 4 }}>\n        <Typography variant=\"h4\" gutterBottom>\n          Crypto Test Page\n        </Typography>\n        <Typography variant=\"body1\" sx={{ mb: 3 }}>\n          This page tests the cryptographic utilities to ensure they're working correctly.\n        </Typography>\n        \n        <Button\n          variant=\"contained\"\n          onClick={runTests}\n          disabled={loading}\n          sx={{ mb: 3 }}\n        >\n          {loading ? 'Running Tests...' : 'Run Tests'}\n        </Button>\n        \n        <TextField\n          fullWidth\n          multiline\n          rows={15}\n          value={testResult}\n          InputProps={{ readOnly: true }}\n          variant=\"outlined\"\n          placeholder=\"Test results will appear here...\"\n        />\n      </Paper>\n    </Container>\n  );\n} "],"names":[],"mappings":"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","debugId":null}}]
}