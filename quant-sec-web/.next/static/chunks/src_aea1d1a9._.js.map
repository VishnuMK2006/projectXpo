{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///D:/projs/qsa/quant-sec-web/src/lib/api.ts"],"sourcesContent":["// API client for communicating with the Django backend\n\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000/quantserver';\n\nexport interface User {\n  name: string;\n  username: string;\n  publicKey: string;\n}\n\nexport interface Email {\n  sender: string;\n  sender_email?: string;\n  sender_name?: string;\n  receiver: string;\n  datetime_of_arrival: string;\n  encrypted_subject: string;\n  encrypted_body: string;\n}\n\nexport interface ApiResponse<T = any> {\n  Message: string;\n  Status: 'Positive' | 'Negative';\n  [key: string]: any;\n}\n\nexport class ApiClient {\n  private static async request<T>(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<ApiResponse<T>> {\n    const url = `${API_BASE_URL}/${endpoint}`;\n    \n    const response = await fetch(url, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    return response.json();\n  }\n\n  // Check if username is unique\n  static async checkUsernameUniqueness(username: string): Promise<boolean> {\n    const response = await this.request(`check-uniqueness?username=${encodeURIComponent(username)}`, {\n      method: 'GET',\n    });\n    \n    // If Status is \"Positive\", the user doesn't exist (username is unique)\n    return response.Status === 'Positive';\n  }\n\n  // Register a new user\n  static async registerUser(\n    name: string,\n    email: string,\n    username: string,\n    publicKey: string,\n    password: string\n  ): Promise<boolean> {\n    const response = await this.request('register-user', {\n      method: 'POST',\n      body: JSON.stringify({\n        name,\n        email,\n        username,\n        public_key: publicKey,\n        password,\n      }),\n    });\n\n    return response.Status === 'Positive';\n  }\n\n  // Get user's public key\n  static async getUserPublicKey(username: string): Promise<{ name: string; publicKey: string } | null> {\n    const response = await this.request(`get-public-key?username=${encodeURIComponent(username)}`, {\n      method: 'GET',\n    });\n\n    if (response.Status === 'Positive') {\n      return {\n        name: response.Name,\n        publicKey: response['Public Key'],\n      };\n    }\n\n    return null;\n  }\n\n  // Login with email or username\n  static async loginUser(identifier: string, password: string): Promise<ApiResponse> {\n    return this.request('login-user', {\n      method: 'POST',\n      body: JSON.stringify({ identifier, password }),\n    });\n  }\n\n  // Send an email (receiver/sender can be email or username)\n  static async sendEmail(\n    receiverIdentifier: string,\n    senderIdentifier: string,\n    encryptedSubject: string,\n    encryptedBody: string,\n    password: string\n  ): Promise<boolean> {\n    const response = await this.request('post-email', {\n      method: 'POST',\n      body: JSON.stringify({\n        reciever_username: receiverIdentifier,\n        sender_username: senderIdentifier,\n        subject: encryptedSubject,\n        body: encryptedBody,\n        password,\n      }),\n    });\n    return response.Status === 'Positive';\n  }\n\n  // Get user's inbox (identifier can be email or username)\n  static async getInbox(identifier: string, password: string): Promise<Email[]> {\n    const response = await this.request(`get-inbox?username=${encodeURIComponent(identifier)}&password=${encodeURIComponent(password)}`, {\n      method: 'GET',\n    });\n    if (response.Status === 'Positive') {\n      return response.Emails || [];\n    }\n    return [];\n  }\n\n  // Clear user's inbox (identifier can be email or username)\n  static async clearInbox(identifier: string, password: string): Promise<boolean> {\n    const response = await this.request('clear-inbox', {\n      method: 'POST',\n      body: JSON.stringify({\n        username: identifier,\n        password,\n      }),\n    });\n    return response.Status === 'Positive';\n  }\n}\n\n// Local storage utilities for user data\nexport interface UserData {\n  name: string;\n  email: string;\n  username: string;\n  publicKey: string;\n  privateKey: string;\n  password: string;\n}\n\nexport class UserStorage {\n  private static readonly STORAGE_KEY = 'quantsec_user_data';\n\n  // Store user data securely\n  static storeUserData(userData: UserData): void {\n    try {\n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(userData));\n    } catch (error) {\n      console.error('Failed to store user data:', error);\n      throw new Error('Failed to store user data');\n    }\n  }\n\n  // Retrieve user data\n  static getUserData(): UserData | null {\n    try {\n      const data = localStorage.getItem(this.STORAGE_KEY);\n      return data ? JSON.parse(data) : null;\n    } catch (error) {\n      console.error('Failed to retrieve user data:', error);\n      return null;\n    }\n  }\n\n  // Check if user is logged in\n  static isLoggedIn(): boolean {\n    return this.getUserData() !== null;\n  }\n\n  // Get current user\n  static getCurrentUser(): UserData | null {\n    return this.getUserData();\n  }\n\n  // Clear user data (logout)\n  static clearUserData(): void {\n    try {\n      localStorage.removeItem(this.STORAGE_KEY);\n    } catch (error) {\n      console.error('Failed to clear user data:', error);\n    }\n  }\n\n  // Update user data (e.g., after key import/export)\n  static updateUserData(updates: Partial<UserData>): void {\n    const currentData = this.getUserData();\n    if (currentData) {\n      const updatedData = { ...currentData, ...updates };\n      this.storeUserData(updatedData);\n    }\n  }\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 168, "column": 0}, "map": {"version":3,"sources":["file:///D:/projs/qsa/quant-sec-web/src/app/keys/page.tsx"],"sourcesContent":["'use client';\r\nimport { useState, useEffect } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Typography,\r\n  Container,\r\n  Alert,\r\n  Paper,\r\n  TextField,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  IconButton,\r\n  InputAdornment,\r\n  Chip,\r\n  Divider,\r\n} from '@mui/material';\r\nimport { ContentCopy, Visibility, VisibilityOff, Download, Upload } from '@mui/icons-material';\r\nimport { UserStorage, UserData } from '@/lib/api';\r\n\r\nexport default function KeysPage() {\r\n  const router = useRouter();\r\n  const [userData, setUserData] = useState<UserData | null>(null);\r\n  const [showPrivateKey, setShowPrivateKey] = useState(false);\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [importDialogOpen, setImportDialogOpen] = useState(false);\r\n  const [importData, setImportData] = useState('');\r\n  const [importError, setImportError] = useState<string | null>(null);\r\n  const [copiedField, setCopiedField] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    const data = UserStorage.getUserData();\r\n    if (!data) {\r\n      router.push('/login');\r\n      return;\r\n    }\r\n    setUserData(data);\r\n  }, [router]);\r\n\r\n  const handleCopy = async (text: string, field: string) => {\r\n    try {\r\n      await navigator.clipboard.writeText(text);\r\n      setCopiedField(field);\r\n      setTimeout(() => setCopiedField(null), 2000);\r\n    } catch (err) {\r\n      console.error('Failed to copy to clipboard:', err);\r\n    }\r\n  };\r\n\r\n  const handleExportKeys = () => {\r\n    if (!userData) return;\r\n    \r\n    const exportData = {\r\n      name: userData.name,\r\n      username: userData.username,\r\n      publicKey: userData.publicKey,\r\n      privateKey: userData.privateKey,\r\n      password: userData.password,\r\n      exportedAt: new Date().toISOString(),\r\n    };\r\n    \r\n    const blob = new Blob([JSON.stringify(exportData, null, 2)], {\r\n      type: 'application/json',\r\n    });\r\n    \r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = `quantsec-keys-${userData.username}.json`;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n    URL.revokeObjectURL(url);\r\n  };\r\n\r\n  const handleImportKeys = () => {\r\n    setImportError(null);\r\n    \r\n    try {\r\n      const parsedData = JSON.parse(importData);\r\n      \r\n      // Validate the imported data\r\n      const requiredFields = ['name', 'username', 'publicKey', 'privateKey', 'password'];\r\n      for (const field of requiredFields) {\r\n        if (!parsedData[field]) {\r\n          setImportError(`Missing required field: ${field}`);\r\n          return;\r\n        }\r\n      }\r\n      \r\n      // Update user data\r\n      UserStorage.storeUserData(parsedData);\r\n      setUserData(parsedData);\r\n      setImportDialogOpen(false);\r\n      setImportData('');\r\n      \r\n    } catch (err) {\r\n      setImportError('Invalid JSON format');\r\n    }\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    UserStorage.clearUserData();\r\n    router.push('/');\r\n  };\r\n\r\n  if (!userData) {\r\n    return (\r\n      <Container maxWidth=\"md\" sx={{ mt: 4 }}>\r\n        <Typography>Loading...</Typography>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"md\" sx={{ mt: 4 }}>\r\n      <Paper sx={{ p: 4 }}>\r\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\r\n          <Typography variant=\"h4\">\r\n            Key Management\r\n          </Typography>\r\n          <Button variant=\"outlined\" color=\"error\" onClick={handleLogout}>\r\n            Logout\r\n          </Button>\r\n        </Box>\r\n\r\n        <Alert severity=\"info\" sx={{ mb: 3 }}>\r\n          <Typography variant=\"body2\">\r\n            <strong>Important:</strong> Your private key is stored securely in your browser's local storage. \r\n            Never share your private key with anyone. Export your keys to backup your account.\r\n          </Typography>\r\n        </Alert>\r\n\r\n        {/* User Info */}\r\n        <Paper variant=\"outlined\" sx={{ p: 3, mb: 3 }}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Account Information\r\n          </Typography>\r\n          <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>\r\n            <Chip label={`Name: ${userData.name}`} variant=\"outlined\" />\r\n            <Chip label={`Username: ${userData.username}`} variant=\"outlined\" />\r\n          </Box>\r\n        </Paper>\r\n\r\n        {/* Public Key */}\r\n        <Paper variant=\"outlined\" sx={{ p: 3, mb: 3 }}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Public Key\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\r\n            Share this key with others so they can send you encrypted messages.\r\n          </Typography>\r\n          <TextField\r\n            fullWidth\r\n            multiline\r\n            rows={4}\r\n            value={userData.publicKey}\r\n            InputProps={{\r\n              readOnly: true,\r\n              endAdornment: (\r\n                <InputAdornment position=\"end\">\r\n                  <IconButton\r\n                    onClick={() => handleCopy(userData.publicKey, 'public')}\r\n                    edge=\"end\"\r\n                  >\r\n                    <ContentCopy />\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n            variant=\"outlined\"\r\n          />\r\n          {copiedField === 'public' && (\r\n            <Typography variant=\"caption\" color=\"success.main\" sx={{ mt: 1, display: 'block' }}>\r\n              Public key copied to clipboard!\r\n            </Typography>\r\n          )}\r\n        </Paper>\r\n\r\n        {/* Private Key */}\r\n        <Paper variant=\"outlined\" sx={{ p: 3, mb: 3 }}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Private Key\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\r\n            <strong>Keep this secret!</strong> This key is used to decrypt messages sent to you.\r\n          </Typography>\r\n          <TextField\r\n            fullWidth\r\n            multiline\r\n            rows={4}\r\n            type={showPrivateKey ? 'text' : 'password'}\r\n            value={userData.privateKey}\r\n            InputProps={{\r\n              readOnly: true,\r\n              endAdornment: (\r\n                <InputAdornment position=\"end\">\r\n                  <IconButton\r\n                    onClick={() => setShowPrivateKey(!showPrivateKey)}\r\n                    edge=\"end\"\r\n                  >\r\n                    {showPrivateKey ? <VisibilityOff /> : <Visibility />}\r\n                  </IconButton>\r\n                  <IconButton\r\n                    onClick={() => handleCopy(userData.privateKey, 'private')}\r\n                    edge=\"end\"\r\n                  >\r\n                    <ContentCopy />\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n            variant=\"outlined\"\r\n          />\r\n          {copiedField === 'private' && (\r\n            <Typography variant=\"caption\" color=\"success.main\" sx={{ mt: 1, display: 'block' }}>\r\n              Private key copied to clipboard!\r\n            </Typography>\r\n          )}\r\n        </Paper>\r\n\r\n        {/* Password */}\r\n        <Paper variant=\"outlined\" sx={{ p: 3, mb: 3 }}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Account Password\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\r\n            This password is used for authentication with the server.\r\n          </Typography>\r\n          <TextField\r\n            fullWidth\r\n            type={showPassword ? 'text' : 'password'}\r\n            value={userData.password}\r\n            InputProps={{\r\n              readOnly: true,\r\n              endAdornment: (\r\n                <InputAdornment position=\"end\">\r\n                  <IconButton\r\n                    onClick={() => setShowPassword(!showPassword)}\r\n                    edge=\"end\"\r\n                  >\r\n                    {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                  </IconButton>\r\n                  <IconButton\r\n                    onClick={() => handleCopy(userData.password, 'password')}\r\n                    edge=\"end\"\r\n                  >\r\n                    <ContentCopy />\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n            variant=\"outlined\"\r\n          />\r\n          {copiedField === 'password' && (\r\n            <Typography variant=\"caption\" color=\"success.main\" sx={{ mt: 1, display: 'block' }}>\r\n              Password copied to clipboard!\r\n            </Typography>\r\n          )}\r\n        </Paper>\r\n\r\n        <Divider sx={{ my: 3 }} />\r\n\r\n        {/* Actions */}\r\n        <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>\r\n          <Button\r\n            variant=\"contained\"\r\n            startIcon={<Download />}\r\n            onClick={handleExportKeys}\r\n          >\r\n            Export Keys\r\n          </Button>\r\n          <Button\r\n            variant=\"outlined\"\r\n            startIcon={<Upload />}\r\n            onClick={() => setImportDialogOpen(true)}\r\n          >\r\n            Import Keys\r\n          </Button>\r\n        </Box>\r\n      </Paper>\r\n\r\n      {/* Import Dialog */}\r\n      <Dialog\r\n        open={importDialogOpen}\r\n        onClose={() => setImportDialogOpen(false)}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Import Keys</DialogTitle>\r\n        <DialogContent>\r\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\r\n            Paste the exported JSON data to restore your account.\r\n          </Typography>\r\n          {importError && (\r\n            <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n              {importError}\r\n            </Alert>\r\n          )}\r\n          <TextField\r\n            fullWidth\r\n            multiline\r\n            rows={8}\r\n            value={importData}\r\n            onChange={(e) => setImportData(e.target.value)}\r\n            placeholder=\"Paste your exported JSON data here...\"\r\n            variant=\"outlined\"\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setImportDialogOpen(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={handleImportKeys}\r\n            variant=\"contained\"\r\n            disabled={!importData.trim()}\r\n          >\r\n            Import\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Container>\r\n  );\r\n} "],"names":[],"mappings":";;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAAA;AAAA;AAAA;AAAA;AACA;;;AArBA;;;;;;;;;;AAuBe,SAAS;;IACtB,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD;IACvB,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAmB;IAC1D,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACrD,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACjD,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACzD,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC7C,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAC9D,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAE9D,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;8BAAE;YACR,MAAM,OAAO,oHAAA,CAAA,cAAW,CAAC,WAAW;YACpC,IAAI,CAAC,MAAM;gBACT,OAAO,IAAI,CAAC;gBACZ;YACF;YACA,YAAY;QACd;6BAAG;QAAC;KAAO;IAEX,MAAM,aAAa,OAAO,MAAc;QACtC,IAAI;YACF,MAAM,UAAU,SAAS,CAAC,SAAS,CAAC;YACpC,eAAe;YACf,WAAW,IAAM,eAAe,OAAO;QACzC,EAAE,OAAO,KAAK;YACZ,QAAQ,KAAK,CAAC,gCAAgC;QAChD;IACF;IAEA,MAAM,mBAAmB;QACvB,IAAI,CAAC,UAAU;QAEf,MAAM,aAAa;YACjB,MAAM,SAAS,IAAI;YACnB,UAAU,SAAS,QAAQ;YAC3B,WAAW,SAAS,SAAS;YAC7B,YAAY,SAAS,UAAU;YAC/B,UAAU,SAAS,QAAQ;YAC3B,YAAY,IAAI,OAAO,WAAW;QACpC;QAEA,MAAM,OAAO,IAAI,KAAK;YAAC,KAAK,SAAS,CAAC,YAAY,MAAM;SAAG,EAAE;YAC3D,MAAM;QACR;QAEA,MAAM,MAAM,IAAI,eAAe,CAAC;QAChC,MAAM,IAAI,SAAS,aAAa,CAAC;QACjC,EAAE,IAAI,GAAG;QACT,EAAE,QAAQ,GAAG,CAAC,cAAc,EAAE,SAAS,QAAQ,CAAC,KAAK,CAAC;QACtD,SAAS,IAAI,CAAC,WAAW,CAAC;QAC1B,EAAE,KAAK;QACP,SAAS,IAAI,CAAC,WAAW,CAAC;QAC1B,IAAI,eAAe,CAAC;IACtB;IAEA,MAAM,mBAAmB;QACvB,eAAe;QAEf,IAAI;YACF,MAAM,aAAa,KAAK,KAAK,CAAC;YAE9B,6BAA6B;YAC7B,MAAM,iBAAiB;gBAAC;gBAAQ;gBAAY;gBAAa;gBAAc;aAAW;YAClF,KAAK,MAAM,SAAS,eAAgB;gBAClC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;oBACtB,eAAe,CAAC,wBAAwB,EAAE,OAAO;oBACjD;gBACF;YACF;YAEA,mBAAmB;YACnB,oHAAA,CAAA,cAAW,CAAC,aAAa,CAAC;YAC1B,YAAY;YACZ,oBAAoB;YACpB,cAAc;QAEhB,EAAE,OAAO,KAAK;YACZ,eAAe;QACjB;IACF;IAEA,MAAM,eAAe;QACnB,oHAAA,CAAA,cAAW,CAAC,aAAa;QACzB,OAAO,IAAI,CAAC;IACd;IAEA,IAAI,CAAC,UAAU;QACb,qBACE,6LAAC,6MAAA,CAAA,YAAS;YAAC,UAAS;YAAK,IAAI;gBAAE,IAAI;YAAE;sBACnC,cAAA,6LAAC,gNAAA,CAAA,aAAU;0BAAC;;;;;;;;;;;IAGlB;IAEA,qBACE,6LAAC,6MAAA,CAAA,YAAS;QAAC,UAAS;QAAK,IAAI;YAAE,IAAI;QAAE;;0BACnC,6LAAC,iMAAA,CAAA,QAAK;gBAAC,IAAI;oBAAE,GAAG;gBAAE;;kCAChB,6LAAC,2LAAA,CAAA,MAAG;wBAAC,IAAI;4BAAE,SAAS;4BAAQ,gBAAgB;4BAAiB,YAAY;4BAAU,IAAI;wBAAE;;0CACvF,6LAAC,gNAAA,CAAA,aAAU;gCAAC,SAAQ;0CAAK;;;;;;0CAGzB,6LAAC,oMAAA,CAAA,SAAM;gCAAC,SAAQ;gCAAW,OAAM;gCAAQ,SAAS;0CAAc;;;;;;;;;;;;kCAKlE,6LAAC,iMAAA,CAAA,QAAK;wBAAC,UAAS;wBAAO,IAAI;4BAAE,IAAI;wBAAE;kCACjC,cAAA,6LAAC,gNAAA,CAAA,aAAU;4BAAC,SAAQ;;8CAClB,6LAAC;8CAAO;;;;;;gCAAmB;;;;;;;;;;;;kCAM/B,6LAAC,iMAAA,CAAA,QAAK;wBAAC,SAAQ;wBAAW,IAAI;4BAAE,GAAG;4BAAG,IAAI;wBAAE;;0CAC1C,6LAAC,gNAAA,CAAA,aAAU;gCAAC,SAAQ;gCAAK,YAAY;0CAAC;;;;;;0CAGtC,6LAAC,2LAAA,CAAA,MAAG;gCAAC,IAAI;oCAAE,SAAS;oCAAQ,KAAK;oCAAG,UAAU;gCAAO;;kDACnD,6LAAC,8LAAA,CAAA,OAAI;wCAAC,OAAO,CAAC,MAAM,EAAE,SAAS,IAAI,EAAE;wCAAE,SAAQ;;;;;;kDAC/C,6LAAC,8LAAA,CAAA,OAAI;wCAAC,OAAO,CAAC,UAAU,EAAE,SAAS,QAAQ,EAAE;wCAAE,SAAQ;;;;;;;;;;;;;;;;;;kCAK3D,6LAAC,iMAAA,CAAA,QAAK;wBAAC,SAAQ;wBAAW,IAAI;4BAAE,GAAG;4BAAG,IAAI;wBAAE;;0CAC1C,6LAAC,gNAAA,CAAA,aAAU;gCAAC,SAAQ;gCAAK,YAAY;0CAAC;;;;;;0CAGtC,6LAAC,gNAAA,CAAA,aAAU;gCAAC,SAAQ;gCAAQ,OAAM;gCAAiB,IAAI;oCAAE,IAAI;gCAAE;0CAAG;;;;;;0CAGlE,6LAAC,6MAAA,CAAA,YAAS;gCACR,SAAS;gCACT,SAAS;gCACT,MAAM;gCACN,OAAO,SAAS,SAAS;gCACzB,YAAY;oCACV,UAAU;oCACV,4BACE,6LAAC,4NAAA,CAAA,iBAAc;wCAAC,UAAS;kDACvB,cAAA,6LAAC,gNAAA,CAAA,aAAU;4CACT,SAAS,IAAM,WAAW,SAAS,SAAS,EAAE;4CAC9C,MAAK;sDAEL,cAAA,6LAAC,mKAAA,CAAA,UAAW;;;;;;;;;;;;;;;gCAIpB;gCACA,SAAQ;;;;;;4BAET,gBAAgB,0BACf,6LAAC,gNAAA,CAAA,aAAU;gCAAC,SAAQ;gCAAU,OAAM;gCAAe,IAAI;oCAAE,IAAI;oCAAG,SAAS;gCAAQ;0CAAG;;;;;;;;;;;;kCAOxF,6LAAC,iMAAA,CAAA,QAAK;wBAAC,SAAQ;wBAAW,IAAI;4BAAE,GAAG;4BAAG,IAAI;wBAAE;;0CAC1C,6LAAC,gNAAA,CAAA,aAAU;gCAAC,SAAQ;gCAAK,YAAY;0CAAC;;;;;;0CAGtC,6LAAC,gNAAA,CAAA,aAAU;gCAAC,SAAQ;gCAAQ,OAAM;gCAAiB,IAAI;oCAAE,IAAI;gCAAE;;kDAC7D,6LAAC;kDAAO;;;;;;oCAA0B;;;;;;;0CAEpC,6LAAC,6MAAA,CAAA,YAAS;gCACR,SAAS;gCACT,SAAS;gCACT,MAAM;gCACN,MAAM,iBAAiB,SAAS;gCAChC,OAAO,SAAS,UAAU;gCAC1B,YAAY;oCACV,UAAU;oCACV,4BACE,6LAAC,4NAAA,CAAA,iBAAc;wCAAC,UAAS;;0DACvB,6LAAC,gNAAA,CAAA,aAAU;gDACT,SAAS,IAAM,kBAAkB,CAAC;gDAClC,MAAK;0DAEJ,+BAAiB,6LAAC,qKAAA,CAAA,UAAa;;;;2EAAM,6LAAC,kKAAA,CAAA,UAAU;;;;;;;;;;0DAEnD,6LAAC,gNAAA,CAAA,aAAU;gDACT,SAAS,IAAM,WAAW,SAAS,UAAU,EAAE;gDAC/C,MAAK;0DAEL,cAAA,6LAAC,mKAAA,CAAA,UAAW;;;;;;;;;;;;;;;;gCAIpB;gCACA,SAAQ;;;;;;4BAET,gBAAgB,2BACf,6LAAC,gNAAA,CAAA,aAAU;gCAAC,SAAQ;gCAAU,OAAM;gCAAe,IAAI;oCAAE,IAAI;oCAAG,SAAS;gCAAQ;0CAAG;;;;;;;;;;;;kCAOxF,6LAAC,iMAAA,CAAA,QAAK;wBAAC,SAAQ;wBAAW,IAAI;4BAAE,GAAG;4BAAG,IAAI;wBAAE;;0CAC1C,6LAAC,gNAAA,CAAA,aAAU;gCAAC,SAAQ;gCAAK,YAAY;0CAAC;;;;;;0CAGtC,6LAAC,gNAAA,CAAA,aAAU;gCAAC,SAAQ;gCAAQ,OAAM;gCAAiB,IAAI;oCAAE,IAAI;gCAAE;0CAAG;;;;;;0CAGlE,6LAAC,6MAAA,CAAA,YAAS;gCACR,SAAS;gCACT,MAAM,eAAe,SAAS;gCAC9B,OAAO,SAAS,QAAQ;gCACxB,YAAY;oCACV,UAAU;oCACV,4BACE,6LAAC,4NAAA,CAAA,iBAAc;wCAAC,UAAS;;0DACvB,6LAAC,gNAAA,CAAA,aAAU;gDACT,SAAS,IAAM,gBAAgB,CAAC;gDAChC,MAAK;0DAEJ,6BAAe,6LAAC,qKAAA,CAAA,UAAa;;;;2EAAM,6LAAC,kKAAA,CAAA,UAAU;;;;;;;;;;0DAEjD,6LAAC,gNAAA,CAAA,aAAU;gDACT,SAAS,IAAM,WAAW,SAAS,QAAQ,EAAE;gDAC7C,MAAK;0DAEL,cAAA,6LAAC,mKAAA,CAAA,UAAW;;;;;;;;;;;;;;;;gCAIpB;gCACA,SAAQ;;;;;;4BAET,gBAAgB,4BACf,6LAAC,gNAAA,CAAA,aAAU;gCAAC,SAAQ;gCAAU,OAAM;gCAAe,IAAI;oCAAE,IAAI;oCAAG,SAAS;gCAAQ;0CAAG;;;;;;;;;;;;kCAMxF,6LAAC,uMAAA,CAAA,UAAO;wBAAC,IAAI;4BAAE,IAAI;wBAAE;;;;;;kCAGrB,6LAAC,2LAAA,CAAA,MAAG;wBAAC,IAAI;4BAAE,SAAS;4BAAQ,KAAK;4BAAG,UAAU;wBAAO;;0CACnD,6LAAC,oMAAA,CAAA,SAAM;gCACL,SAAQ;gCACR,yBAAW,6LAAC,gKAAA,CAAA,UAAQ;;;;;gCACpB,SAAS;0CACV;;;;;;0CAGD,6LAAC,oMAAA,CAAA,SAAM;gCACL,SAAQ;gCACR,yBAAW,6LAAC,8JAAA,CAAA,UAAM;;;;;gCAClB,SAAS,IAAM,oBAAoB;0CACpC;;;;;;;;;;;;;;;;;;0BAOL,6LAAC,oMAAA,CAAA,SAAM;gBACL,MAAM;gBACN,SAAS,IAAM,oBAAoB;gBACnC,UAAS;gBACT,SAAS;;kCAET,6LAAC,mNAAA,CAAA,cAAW;kCAAC;;;;;;kCACb,6LAAC,yNAAA,CAAA,gBAAa;;0CACZ,6LAAC,gNAAA,CAAA,aAAU;gCAAC,SAAQ;gCAAQ,OAAM;gCAAiB,IAAI;oCAAE,IAAI;gCAAE;0CAAG;;;;;;4BAGjE,6BACC,6LAAC,iMAAA,CAAA,QAAK;gCAAC,UAAS;gCAAQ,IAAI;oCAAE,IAAI;gCAAE;0CACjC;;;;;;0CAGL,6LAAC,6MAAA,CAAA,YAAS;gCACR,SAAS;gCACT,SAAS;gCACT,MAAM;gCACN,OAAO;gCACP,UAAU,CAAC,IAAM,cAAc,EAAE,MAAM,CAAC,KAAK;gCAC7C,aAAY;gCACZ,SAAQ;;;;;;;;;;;;kCAGZ,6LAAC,yNAAA,CAAA,gBAAa;;0CACZ,6LAAC,oMAAA,CAAA,SAAM;gCAAC,SAAS,IAAM,oBAAoB;0CAAQ;;;;;;0CAGnD,6LAAC,oMAAA,CAAA,SAAM;gCACL,SAAS;gCACT,SAAQ;gCACR,UAAU,CAAC,WAAW,IAAI;0CAC3B;;;;;;;;;;;;;;;;;;;;;;;;AAOX;GAhTwB;;QACP,qIAAA,CAAA,YAAS;;;KADF","debugId":null}}]
}