{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///D:/projs/qsa/quant-sec-web/src/lib/crypto.ts"],"sourcesContent":["// Crypto utilities for the Quantum Secure Email Client\r\n// Uses Web Crypto API for AES-256, HMAC-SHA256, and scrypt for key derivation\r\n// Uses real Crystal-Kyber via backend API\r\n\r\nexport interface KyberKeyPair {\r\n  publicKey: string; // base64 encoded\r\n  privateKey: string; // base64 encoded\r\n}\r\n\r\nexport interface EncryptedData {\r\n  tag: string; // HMAC-SHA256 hash\r\n  concatenatedString: string; // JSON string with salt, cipher_text, encrypted_passkey, iv\r\n}\r\n\r\nexport interface AESEncryptedData {\r\n  cipher_text: string; // base64 encoded\r\n  salt: string; // base64 encoded\r\n  iv: string; // base64 encoded IV\r\n}\r\n\r\n// Web Crypto API utilities\r\nexport class CryptoUtils {\r\n  // Generate random bytes\r\n  static async randomBytes(length: number): Promise<Uint8Array> {\r\n    return crypto.getRandomValues(new Uint8Array(length));\r\n  }\r\n\r\n  // Convert ArrayBuffer to base64\r\n  static arrayBufferToBase64(buffer: ArrayBuffer): string {\r\n    const bytes = new Uint8Array(buffer);\r\n    let binary = '';\r\n    for (let i = 0; i < bytes.byteLength; i++) {\r\n      binary += String.fromCharCode(bytes[i]);\r\n    }\r\n    return btoa(binary);\r\n  }\r\n\r\n  // Convert base64 to ArrayBuffer\r\n  static base64ToArrayBuffer(base64: string): ArrayBuffer {\r\n    const binaryString = atob(base64);\r\n    const bytes = new Uint8Array(binaryString.length);\r\n    for (let i = 0; i < binaryString.length; i++) {\r\n      bytes[i] = binaryString.charCodeAt(i);\r\n    }\r\n    return bytes.buffer;\r\n  }\r\n\r\n  // Convert string to ArrayBuffer\r\n  static stringToArrayBuffer(str: string): ArrayBuffer {\r\n    const encoder = new TextEncoder();\r\n    return encoder.encode(str).buffer;\r\n  }\r\n\r\n  // Convert ArrayBuffer to string\r\n  static arrayBufferToString(buffer: ArrayBuffer): string {\r\n    const decoder = new TextDecoder();\r\n    return decoder.decode(buffer);\r\n  }\r\n\r\n  // Derive key using scrypt (using scrypt-js library)\r\n  static async deriveKey(password: string, salt: Uint8Array, keyLength: number = 32): Promise<Uint8Array> {\r\n    // Import scrypt-js dynamically\r\n    const { scrypt } = await import('scrypt-js');\r\n    \r\n    const passwordBuffer = this.stringToArrayBuffer(password);\r\n    const derivedKey = await scrypt(\r\n      new Uint8Array(passwordBuffer),\r\n      salt,\r\n      16384, // N = 2^14\r\n      8,     // r = 8\r\n      1,     // p = 1\r\n      keyLength\r\n    );\r\n    \r\n    return derivedKey;\r\n  }\r\n\r\n  // AES-256 encryption using Web Crypto API with secure IV\r\n  static async aesEncrypt(plaintext: string, passkey: string): Promise<AESEncryptedData> {\r\n    const salt = await this.randomBytes(16);\r\n    const iv = await this.randomBytes(16); // ✅ Secure random IV\r\n    const key = await this.deriveKey(passkey, salt);\r\n    \r\n    // Import the key\r\n    const cryptoKey = await crypto.subtle.importKey(\r\n      'raw',\r\n      key,\r\n      { name: 'AES-CBC' },\r\n      false,\r\n      ['encrypt']\r\n    );\r\n\r\n    // Pad the plaintext to 16-byte blocks\r\n    const paddedText = this.pad(plaintext);\r\n    const plaintextBuffer = this.stringToArrayBuffer(paddedText);\r\n    \r\n    // Encrypt\r\n    const encryptedBuffer = await crypto.subtle.encrypt(\r\n      { name: 'AES-CBC', iv },\r\n      cryptoKey,\r\n      plaintextBuffer\r\n    );\r\n\r\n    return {\r\n      cipher_text: this.arrayBufferToBase64(encryptedBuffer),\r\n      salt: this.arrayBufferToBase64(salt),\r\n      iv: this.arrayBufferToBase64(iv) // ✅ Include IV in output\r\n    };\r\n  }\r\n\r\n  // AES-256 decryption using Web Crypto API with IV\r\n  static async aesDecrypt(encryptedData: AESEncryptedData, passkey: string): Promise<string> {\r\n    const salt = new Uint8Array(this.base64ToArrayBuffer(encryptedData.salt));\r\n    const iv = new Uint8Array(this.base64ToArrayBuffer(encryptedData.iv)); // ✅ Use provided IV\r\n    const key = await this.deriveKey(passkey, salt);\r\n    \r\n    // Import the key\r\n    const cryptoKey = await crypto.subtle.importKey(\r\n      'raw',\r\n      key,\r\n      { name: 'AES-CBC' },\r\n      false,\r\n      ['decrypt']\r\n    );\r\n\r\n    const encryptedBuffer = this.base64ToArrayBuffer(encryptedData.cipher_text);\r\n    \r\n    // Decrypt\r\n    const decryptedBuffer = await crypto.subtle.decrypt(\r\n      { name: 'AES-CBC', iv },\r\n      cryptoKey,\r\n      encryptedBuffer\r\n    );\r\n\r\n    const decryptedText = this.arrayBufferToString(decryptedBuffer);\r\n    return this.unpad(decryptedText);\r\n  }\r\n\r\n  // HMAC-SHA256 - ✅ Proper HMAC implementation\r\n  static async hmacSha256(data: string, key: string): Promise<string> {\r\n    const keyBuffer = this.stringToArrayBuffer(key);\r\n    const dataBuffer = this.stringToArrayBuffer(data);\r\n    \r\n    const cryptoKey = await crypto.subtle.importKey(\r\n      'raw',\r\n      keyBuffer,\r\n      { name: 'HMAC', hash: 'SHA-256' },\r\n      false,\r\n      ['sign']\r\n    );\r\n    \r\n    const signature = await crypto.subtle.sign(\r\n      'HMAC',\r\n      cryptoKey,\r\n      dataBuffer\r\n    );\r\n    \r\n    return this.arrayBufferToBase64(signature);\r\n  }\r\n\r\n  // SHA-256 hash\r\n  static async sha256(data: string): Promise<string> {\r\n    const dataBuffer = this.stringToArrayBuffer(data);\r\n    const hashBuffer = await crypto.subtle.digest('SHA-256', dataBuffer);\r\n    return this.arrayBufferToBase64(hashBuffer);\r\n  }\r\n\r\n  // Pad string to 16-byte blocks\r\n  private static pad(s: string): string {\r\n    const blockSize = 16;\r\n    const remainder = s.length % blockSize;\r\n    const paddingNeeded = blockSize - remainder;\r\n    return s + ' '.repeat(paddingNeeded);\r\n  }\r\n\r\n  // Unpad string\r\n  private static unpad(s: string): string {\r\n    return s.trim();\r\n  }\r\n}\r\n\r\n// Real Kyber implementation via backend API\r\nexport class RealKyber {\r\n  private static readonly API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000/quantserver';\r\n\r\n  // Generate real Kyber keypair via backend\r\n  static async keygen(): Promise<KyberKeyPair> {\r\n    const response = await fetch(`${this.API_BASE_URL}/kyber-keygen`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to generate Kyber keypair');\r\n    }\r\n\r\n    const data = await response.json();\r\n    if (data.Status === 'Positive') {\r\n      return {\r\n        publicKey: data.public_key,\r\n        privateKey: data.private_key\r\n      };\r\n    } else {\r\n      throw new Error(data.Message || 'Key generation failed');\r\n    }\r\n  }\r\n\r\n  // Encrypt using real Kyber via backend\r\n  static async encrypt(message: string, receiverPublicKey: string): Promise<EncryptedData> {\r\n    const response = await fetch(`${this.API_BASE_URL}/kyber-encrypt`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        message,\r\n        receiver_public_key: receiverPublicKey\r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to encrypt message');\r\n    }\r\n\r\n    const data = await response.json();\r\n    if (data.Status === 'Positive') {\r\n      return data.encrypted_data;\r\n    } else {\r\n      throw new Error(data.Message || 'Encryption failed');\r\n    }\r\n  }\r\n\r\n  // Decrypt using real Kyber via backend\r\n  static async decrypt(tag: string, concatenatedString: string, username: string): Promise<string> {\r\n    const response = await fetch(`${this.API_BASE_URL}/kyber-decrypt`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        tag,\r\n        concatenated_string: concatenatedString,\r\n        username\r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to decrypt message');\r\n    }\r\n\r\n    const data = await response.json();\r\n    if (data.Status === 'Positive') {\r\n      return data.decrypted_message;\r\n    } else {\r\n      throw new Error(data.Message || 'Decryption failed');\r\n    }\r\n  }\r\n}\r\n\r\n// Main encryption function using real Kyber\r\nexport async function encrypt(message: string, receiverKyberPublicKey: string): Promise<EncryptedData> {\r\n  return await RealKyber.encrypt(message, receiverKyberPublicKey);\r\n}\r\n\r\n// Main decryption function using real Kyber\r\nexport async function decrypt(\r\n  tag: string, \r\n  concatenatedString: string, \r\n  username: string\r\n): Promise<string> {\r\n  return await RealKyber.decrypt(tag, concatenatedString, username);\r\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 218, "column": 0}, "map": {"version":3,"sources":["file:///D:/projs/qsa/quant-sec-web/src/lib/api.ts"],"sourcesContent":["// API client for communicating with the Django backend\n\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000/quantserver';\n\nexport interface User {\n  name: string;\n  username: string;\n  publicKey: string;\n}\n\nexport interface Email {\n  sender: string;\n  sender_email?: string;\n  sender_name?: string;\n  receiver: string;\n  datetime_of_arrival: string;\n  encrypted_subject: string;\n  encrypted_body: string;\n}\n\nexport interface ApiResponse<T = any> {\n  Message: string;\n  Status: 'Positive' | 'Negative';\n  [key: string]: any;\n}\n\nexport class ApiClient {\n  private static async request<T>(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<ApiResponse<T>> {\n    const url = `${API_BASE_URL}/${endpoint}`;\n    \n    const response = await fetch(url, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    return response.json();\n  }\n\n  // Check if username is unique\n  static async checkUsernameUniqueness(username: string): Promise<boolean> {\n    const response = await this.request(`check-uniqueness?username=${encodeURIComponent(username)}`, {\n      method: 'GET',\n    });\n    \n    // If Status is \"Positive\", the user doesn't exist (username is unique)\n    return response.Status === 'Positive';\n  }\n\n  // Register a new user\n  static async registerUser(\n    name: string,\n    email: string,\n    username: string,\n    publicKey: string,\n    password: string\n  ): Promise<boolean> {\n    const response = await this.request('register-user', {\n      method: 'POST',\n      body: JSON.stringify({\n        name,\n        email,\n        username,\n        public_key: publicKey,\n        password,\n      }),\n    });\n\n    return response.Status === 'Positive';\n  }\n\n  // Get user's public key\n  static async getUserPublicKey(username: string): Promise<{ name: string; publicKey: string } | null> {\n    const response = await this.request(`get-public-key?username=${encodeURIComponent(username)}`, {\n      method: 'GET',\n    });\n\n    if (response.Status === 'Positive') {\n      return {\n        name: response.Name,\n        publicKey: response['Public Key'],\n      };\n    }\n\n    return null;\n  }\n\n  // Login with email or username\n  static async loginUser(identifier: string, password: string): Promise<ApiResponse> {\n    return this.request('login-user', {\n      method: 'POST',\n      body: JSON.stringify({ identifier, password }),\n    });\n  }\n\n  // Send an email (receiver/sender can be email or username)\n  static async sendEmail(\n    receiverIdentifier: string,\n    senderIdentifier: string,\n    encryptedSubject: string,\n    encryptedBody: string,\n    password: string\n  ): Promise<boolean> {\n    const response = await this.request('post-email', {\n      method: 'POST',\n      body: JSON.stringify({\n        reciever_username: receiverIdentifier,\n        sender_username: senderIdentifier,\n        subject: encryptedSubject,\n        body: encryptedBody,\n        password,\n      }),\n    });\n    return response.Status === 'Positive';\n  }\n\n  // Get user's inbox (identifier can be email or username)\n  static async getInbox(identifier: string, password: string): Promise<Email[]> {\n    const response = await this.request(`get-inbox?username=${encodeURIComponent(identifier)}&password=${encodeURIComponent(password)}`, {\n      method: 'GET',\n    });\n    if (response.Status === 'Positive') {\n      return response.Emails || [];\n    }\n    return [];\n  }\n\n  // Clear user's inbox (identifier can be email or username)\n  static async clearInbox(identifier: string, password: string): Promise<boolean> {\n    const response = await this.request('clear-inbox', {\n      method: 'POST',\n      body: JSON.stringify({\n        username: identifier,\n        password,\n      }),\n    });\n    return response.Status === 'Positive';\n  }\n}\n\n// Local storage utilities for user data\nexport interface UserData {\n  name: string;\n  email: string;\n  username: string;\n  publicKey: string;\n  privateKey: string;\n  password: string;\n}\n\nexport class UserStorage {\n  private static readonly STORAGE_KEY = 'quantsec_user_data';\n\n  // Store user data securely\n  static storeUserData(userData: UserData): void {\n    try {\n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(userData));\n    } catch (error) {\n      console.error('Failed to store user data:', error);\n      throw new Error('Failed to store user data');\n    }\n  }\n\n  // Retrieve user data\n  static getUserData(): UserData | null {\n    try {\n      const data = localStorage.getItem(this.STORAGE_KEY);\n      return data ? JSON.parse(data) : null;\n    } catch (error) {\n      console.error('Failed to retrieve user data:', error);\n      return null;\n    }\n  }\n\n  // Check if user is logged in\n  static isLoggedIn(): boolean {\n    return this.getUserData() !== null;\n  }\n\n  // Get current user\n  static getCurrentUser(): UserData | null {\n    return this.getUserData();\n  }\n\n  // Clear user data (logout)\n  static clearUserData(): void {\n    try {\n      localStorage.removeItem(this.STORAGE_KEY);\n    } catch (error) {\n      console.error('Failed to clear user data:', error);\n    }\n  }\n\n  // Update user data (e.g., after key import/export)\n  static updateUserData(updates: Partial<UserData>): void {\n    const currentData = this.getUserData();\n    if (currentData) {\n      const updatedData = { ...currentData, ...updates };\n      this.storeUserData(updatedData);\n    }\n  }\n} "],"names":[],"mappings":"AAAA,uDAAuD;;;;;AAElC;AAArB,MAAM,eAAe,gKAAA,CAAA,UAAO,CAAC,GAAG,CAAC,mBAAmB,IAAI;AAwBjD,MAAM;IACX,aAAqB,QACnB,QAAgB,EAChB,UAAuB,CAAC,CAAC,EACA;QACzB,MAAM,MAAM,GAAG,aAAa,CAAC,EAAE,UAAU;QAEzC,MAAM,WAAW,MAAM,MAAM,KAAK;YAChC,SAAS;gBACP,gBAAgB;gBAChB,GAAG,QAAQ,OAAO;YACpB;YACA,GAAG,OAAO;QACZ;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM,CAAC,oBAAoB,EAAE,SAAS,MAAM,EAAE;QAC1D;QAEA,OAAO,SAAS,IAAI;IACtB;IAEA,8BAA8B;IAC9B,aAAa,wBAAwB,QAAgB,EAAoB;QACvE,MAAM,WAAW,MAAM,IAAI,CAAC,OAAO,CAAC,CAAC,0BAA0B,EAAE,mBAAmB,WAAW,EAAE;YAC/F,QAAQ;QACV;QAEA,uEAAuE;QACvE,OAAO,SAAS,MAAM,KAAK;IAC7B;IAEA,sBAAsB;IACtB,aAAa,aACX,IAAY,EACZ,KAAa,EACb,QAAgB,EAChB,SAAiB,EACjB,QAAgB,EACE;QAClB,MAAM,WAAW,MAAM,IAAI,CAAC,OAAO,CAAC,iBAAiB;YACnD,QAAQ;YACR,MAAM,KAAK,SAAS,CAAC;gBACnB;gBACA;gBACA;gBACA,YAAY;gBACZ;YACF;QACF;QAEA,OAAO,SAAS,MAAM,KAAK;IAC7B;IAEA,wBAAwB;IACxB,aAAa,iBAAiB,QAAgB,EAAuD;QACnG,MAAM,WAAW,MAAM,IAAI,CAAC,OAAO,CAAC,CAAC,wBAAwB,EAAE,mBAAmB,WAAW,EAAE;YAC7F,QAAQ;QACV;QAEA,IAAI,SAAS,MAAM,KAAK,YAAY;YAClC,OAAO;gBACL,MAAM,SAAS,IAAI;gBACnB,WAAW,QAAQ,CAAC,aAAa;YACnC;QACF;QAEA,OAAO;IACT;IAEA,+BAA+B;IAC/B,aAAa,UAAU,UAAkB,EAAE,QAAgB,EAAwB;QACjF,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc;YAChC,QAAQ;YACR,MAAM,KAAK,SAAS,CAAC;gBAAE;gBAAY;YAAS;QAC9C;IACF;IAEA,2DAA2D;IAC3D,aAAa,UACX,kBAA0B,EAC1B,gBAAwB,EACxB,gBAAwB,EACxB,aAAqB,EACrB,QAAgB,EACE;QAClB,MAAM,WAAW,MAAM,IAAI,CAAC,OAAO,CAAC,cAAc;YAChD,QAAQ;YACR,MAAM,KAAK,SAAS,CAAC;gBACnB,mBAAmB;gBACnB,iBAAiB;gBACjB,SAAS;gBACT,MAAM;gBACN;YACF;QACF;QACA,OAAO,SAAS,MAAM,KAAK;IAC7B;IAEA,yDAAyD;IACzD,aAAa,SAAS,UAAkB,EAAE,QAAgB,EAAoB;QAC5E,MAAM,WAAW,MAAM,IAAI,CAAC,OAAO,CAAC,CAAC,mBAAmB,EAAE,mBAAmB,YAAY,UAAU,EAAE,mBAAmB,WAAW,EAAE;YACnI,QAAQ;QACV;QACA,IAAI,SAAS,MAAM,KAAK,YAAY;YAClC,OAAO,SAAS,MAAM,IAAI,EAAE;QAC9B;QACA,OAAO,EAAE;IACX;IAEA,2DAA2D;IAC3D,aAAa,WAAW,UAAkB,EAAE,QAAgB,EAAoB;QAC9E,MAAM,WAAW,MAAM,IAAI,CAAC,OAAO,CAAC,eAAe;YACjD,QAAQ;YACR,MAAM,KAAK,SAAS,CAAC;gBACnB,UAAU;gBACV;YACF;QACF;QACA,OAAO,SAAS,MAAM,KAAK;IAC7B;AACF;AAYO,MAAM;IACX,OAAwB,cAAc,qBAAqB;IAE3D,2BAA2B;IAC3B,OAAO,cAAc,QAAkB,EAAQ;QAC7C,IAAI;YACF,aAAa,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,SAAS,CAAC;QACxD,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,8BAA8B;YAC5C,MAAM,IAAI,MAAM;QAClB;IACF;IAEA,qBAAqB;IACrB,OAAO,cAA+B;QACpC,IAAI;YACF,MAAM,OAAO,aAAa,OAAO,CAAC,IAAI,CAAC,WAAW;YAClD,OAAO,OAAO,KAAK,KAAK,CAAC,QAAQ;QACnC,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,iCAAiC;YAC/C,OAAO;QACT;IACF;IAEA,6BAA6B;IAC7B,OAAO,aAAsB;QAC3B,OAAO,IAAI,CAAC,WAAW,OAAO;IAChC;IAEA,mBAAmB;IACnB,OAAO,iBAAkC;QACvC,OAAO,IAAI,CAAC,WAAW;IACzB;IAEA,2BAA2B;IAC3B,OAAO,gBAAsB;QAC3B,IAAI;YACF,aAAa,UAAU,CAAC,IAAI,CAAC,WAAW;QAC1C,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,8BAA8B;QAC9C;IACF;IAEA,mDAAmD;IACnD,OAAO,eAAe,OAA0B,EAAQ;QACtD,MAAM,cAAc,IAAI,CAAC,WAAW;QACpC,IAAI,aAAa;YACf,MAAM,cAAc;gBAAE,GAAG,WAAW;gBAAE,GAAG,OAAO;YAAC;YACjD,IAAI,CAAC,aAAa,CAAC;QACrB;IACF;AACF","debugId":null}},
    {"offset": {"line": 379, "column": 0}, "map": {"version":3,"sources":["file:///D:/projs/qsa/quant-sec-web/src/app/register/page.tsx"],"sourcesContent":["'use client';\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport {\n  Box,\n  Button,\n  TextField,\n  Typography,\n  Container,\n  Alert,\n  CircularProgress,\n  Paper,\n  Stepper,\n  Step,\n  StepLabel,\n} from '@mui/material';\nimport { RealKyber } from '@/lib/crypto';\nimport { ApiClient, UserStorage, UserData } from '@/lib/api';\n\nconst steps = ['Enter Details', 'Generate Keys', 'Register Account'];\n\nexport default function RegisterPage() {\n  const router = useRouter();\n  const [activeStep, setActiveStep] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  \n  // Form data\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  \n  // Validation\n  const [nameError, setNameError] = useState('');\n  const [emailError, setEmailError] = useState('');\n  const [usernameError, setUsernameError] = useState('');\n  const [passwordError, setPasswordError] = useState('');\n  const [confirmPasswordError, setConfirmPasswordError] = useState('');\n\n  // Add new state for key generation\n  const [keyPair, setKeyPair] = useState<{ publicKey: string; privateKey: string } | null>(null);\n  const [keyGenLoading, setKeyGenLoading] = useState(false);\n  const [keyGenError, setKeyGenError] = useState<string | null>(null);\n\n  const validateStep1 = (): boolean => {\n    let isValid = true;\n    \n    // Reset errors\n    setNameError('');\n    setEmailError('');\n    setUsernameError('');\n    setPasswordError('');\n    setConfirmPasswordError('');\n    \n    // Validate name\n    if (!name.trim()) {\n      setNameError('Name is required');\n      isValid = false;\n    }\n    \n    // Validate email\n    if (!email.trim()) {\n      setEmailError('Email is required');\n      isValid = false;\n    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\n      setEmailError('Please enter a valid email address');\n      isValid = false;\n    }\n    \n    // Validate username\n    if (!username.trim()) {\n      setUsernameError('Username is required');\n      isValid = false;\n    } else if (username.length < 3) {\n      setUsernameError('Username must be at least 3 characters');\n      isValid = false;\n    } else if (!/^[a-zA-Z0-9_]+$/.test(username)) {\n      setUsernameError('Username can only contain letters, numbers, and underscores');\n      isValid = false;\n    }\n    \n    // Validate password\n    if (!password) {\n      setPasswordError('Password is required');\n      isValid = false;\n    } else if (password.length < 6) {\n      setPasswordError('Password must be at least 6 characters');\n      isValid = false;\n    }\n    \n    // Validate confirm password\n    if (password !== confirmPassword) {\n      setConfirmPasswordError('Passwords do not match');\n      isValid = false;\n    }\n    \n    return isValid;\n  };\n\n  // When entering step 1 (Generate Keys), trigger key generation\n  useEffect(() => {\n    if (activeStep === 1 && !keyPair && !keyGenLoading) {\n      setKeyGenLoading(true);\n      setKeyGenError(null);\n      RealKyber.keygen()\n        .then((kp) => {\n          setKeyPair(kp);\n          setKeyGenLoading(false);\n        })\n        .catch((err) => {\n          setKeyGenError('Key generation failed. Please try again.');\n          setKeyGenLoading(false);\n        });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [activeStep]);\n\n  const handleNext = async () => {\n    if (activeStep === 0) {\n      if (!validateStep1()) {\n        return;\n      }\n      \n      // Check username uniqueness\n      setLoading(true);\n      setError(null);\n      try {\n        const isUnique = await ApiClient.checkUsernameUniqueness(username);\n        if (!isUnique) {\n          setUsernameError('Username already exists');\n          setLoading(false);\n          return;\n        }\n        setActiveStep(1);\n      } catch (err) {\n        setError('Failed to check username. Please try again.');\n      } finally {\n        setLoading(false);\n      }\n    } else if (activeStep === 1) {\n      // Only allow next if keyPair is present and not loading\n      if (!keyPair || keyGenLoading) return;\n      setActiveStep(2);\n    }\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevStep) => prevStep - 1);\n  };\n\n  const handleRegister = async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      if (!keyPair) {\n        setError('Key pair not generated.');\n        setLoading(false);\n        return;\n      }\n      // Register user with backend\n      const success = await ApiClient.registerUser(\n        name,\n        email,\n        username,\n        keyPair.publicKey,\n        password\n      );\n      \n      if (success) {\n        // Store user data locally\n        const userData: UserData = {\n          name,\n          email,\n          username,\n          publicKey: keyPair.publicKey,\n          privateKey: keyPair.privateKey,\n          password,\n        };\n        \n        UserStorage.storeUserData(userData);\n        \n        // Redirect to home page\n        router.push('/');\n      } else {\n        setError('Registration failed. Please try again.');\n      }\n    } catch (err) {\n      setError('Registration failed. Please try again.');\n      console.error('Registration error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const renderStepContent = (step: number) => {\n    switch (step) {\n      case 0:\n        return (\n          <Box sx={{ mt: 2 }}>\n            <TextField\n              fullWidth\n              label=\"Full Name\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              error={!!nameError}\n              helperText={nameError}\n              margin=\"normal\"\n              disabled={loading}\n            />\n            <TextField\n              fullWidth\n              label=\"Email\"\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              error={!!emailError}\n              helperText={emailError}\n              margin=\"normal\"\n              disabled={loading}\n            />\n            <TextField\n              fullWidth\n              label=\"Username\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n              error={!!usernameError}\n              helperText={usernameError}\n              margin=\"normal\"\n              disabled={loading}\n            />\n            <TextField\n              fullWidth\n              label=\"Password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              error={!!passwordError}\n              helperText={passwordError}\n              margin=\"normal\"\n              disabled={loading}\n            />\n            <TextField\n              fullWidth\n              label=\"Confirm Password\"\n              type=\"password\"\n              value={confirmPassword}\n              onChange={(e) => setConfirmPassword(e.target.value)}\n              error={!!confirmPasswordError}\n              helperText={confirmPasswordError}\n              margin=\"normal\"\n              disabled={loading}\n            />\n          </Box>\n        );\n      \n      case 1:\n        return (\n          <Box sx={{ mt: 2, textAlign: 'center' }}>\n            <Typography variant=\"h6\" gutterBottom>\n              Generating Quantum-Safe Key Pair\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n              This process generates a Crystal-Kyber key pair for secure communication.<br />\n              The private key will be stored securely in your browser.\n            </Typography>\n            {keyGenLoading && <CircularProgress />}\n            {keyGenError && (\n              <Alert severity=\"error\" sx={{ mt: 2 }}>{keyGenError}</Alert>\n            )}\n            {keyPair && !keyGenLoading && !keyGenError && (\n              <Alert severity=\"success\" sx={{ mt: 2 }}>\n                Quantum key generated successfully!<br />\n                <Typography variant=\"caption\" sx={{ wordBreak: 'break-all' }}>\n                  Public Key: {keyPair.publicKey}\n                </Typography>\n              </Alert>\n            )}\n            {keyGenError && (\n              <Button sx={{ mt: 2 }} onClick={() => {\n                setKeyGenLoading(true);\n                setKeyGenError(null);\n                RealKyber.keygen()\n                  .then((kp) => {\n                    setKeyPair(kp);\n                    setKeyGenLoading(false);\n                  })\n                  .catch((err) => {\n                    setKeyGenError('Key generation failed. Please try again.');\n                    setKeyGenLoading(false);\n                  });\n              }} disabled={keyGenLoading}>\n                Retry\n              </Button>\n            )}\n          </Box>\n        );\n      \n      case 2:\n        return (\n          <Box sx={{ mt: 2, textAlign: 'center' }}>\n            <Typography variant=\"h6\" gutterBottom>\n              Ready to Register\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n              Your account will be created with the following details:\n            </Typography>\n            <Paper sx={{ p: 2, mb: 2, textAlign: 'left' }}>\n              <Typography><strong>Name:</strong> {name}</Typography>\n              <Typography><strong>Email:</strong> {email}</Typography>\n              <Typography><strong>Username:</strong> {username}</Typography>\n              <Typography><strong>Key Pair:</strong> {keyPair ? 'Generated ✓' : 'Not generated'}</Typography>\n            </Paper>\n          </Box>\n        );\n      \n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Container maxWidth=\"sm\" sx={{ mt: 4 }}>\n      <Paper sx={{ p: 4 }}>\n        <Typography variant=\"h4\" gutterBottom align=\"center\">\n          Create Account\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" sx={{ mb: 4 }}>\n          Join the Quantum Secure Email Network\n        </Typography>\n\n        <Stepper activeStep={activeStep} sx={{ mb: 4 }}>\n          {steps.map((label) => (\n            <Step key={label}>\n              <StepLabel>{label}</StepLabel>\n            </Step>\n          ))}\n        </Stepper>\n\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\n            {error}\n          </Alert>\n        )}\n\n        {renderStepContent(activeStep)}\n\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 4 }}>\n          <Button\n            disabled={activeStep === 0 || loading}\n            onClick={handleBack}\n          >\n            Back\n          </Button>\n          \n          <Box>\n            {activeStep === steps.length - 1 ? (\n              <Button\n                variant=\"contained\"\n                onClick={handleRegister}\n                disabled={loading}\n                startIcon={loading ? <CircularProgress size={20} /> : null}\n              >\n                {loading ? 'Creating Account...' : 'Create Account'}\n              </Button>\n            ) : (\n              <Button\n                variant=\"contained\"\n                onClick={handleNext}\n                disabled={loading || (activeStep === 1 && (!keyPair || keyGenLoading))}\n                startIcon={loading ? <CircularProgress size={20} /> : null}\n              >\n                {loading ? 'Checking...' : 'Next'}\n              </Button>\n            )}\n          </Box>\n        </Box>\n      </Paper>\n    </Container>\n  );\n} "],"names":[],"mappings":"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","debugId":null}}]
}